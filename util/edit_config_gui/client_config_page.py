from PySide6.QtCore import QSize, Qt
from PySide6.QtGui import QFont
from siui.components import (
    SiDenseVContainer,
    SiLineEditWithDeletionButton,
    SiTitledWidgetGroup,
)
from siui.components.button import (
    SiLongPressButtonRefactor,
    SiToggleButtonRefactor,
)
from siui.components.combobox import SiComboBox
from siui.components.option_card import SiOptionCardLinear
from siui.components.page import SiPage
from siui.components.slider_ import SiSlider
from siui.components.spinbox.spinbox import SiDoubleSpinBox, SiIntSpinBox
from siui.components.titled_widget_group import SiTitledWidgetGroup
from siui.components.widgets import (
    SiDenseVContainer,
    SiSwitch,
)
from siui.core import SiGlobal

from util.value_check import ValueCheck

from .select_path import SelectPath
from .set_default_button import SetDefaultButton


class ClientConfigPage(SiPage):
    def __init__(self, config, config_path, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.config = config
        self.config_path = config_path
        self.vscode_exe_path: str = self.config["client"]["vscode_exe_path"]
        self.init_ui()
        self.vscode_exe_path_selector.pathSelected.connect(
            self.on_vscode_exe_path_selected
        )
        self.vscode_exe_path_selector.path_input.lineEdit().editingFinished.connect(
            lambda: self.on_vscode_exe_path_selected(
                self.vscode_exe_path_selector.path_input.lineEdit().text()
            )
        )
        self.addr_set_default.clicked.connect(
            lambda: self.addr.lineEdit().setText("127.0.0.1")
        )
        self.use_offline_translate_function.toggled.connect(
            lambda: self.use_offline_translate_function_changed()
        )
        self.speech_recognition_shortcut_set_default.clicked.connect(
            lambda: self.speech_recognition_shortcut.lineEdit().setText("caps lock")
        )
        self.speech_recognition_port_set_default.clicked.connect(
            lambda: self.speech_recognition_port.setValue(6016)
        )
        self.mic_seg_duration_set_default.clicked.connect(
            lambda: self.mic_seg_duration.setValue(15)
        )
        self.mic_seg_overlap_set_default.clicked.connect(
            lambda: self.mic_seg_overlap.setValue(2)
        )
        self.file_seg_duration_set_default.clicked.connect(
            lambda: self.file_seg_duration.setValue(25)
        )
        self.file_seg_overlap_set_default.clicked.connect(
            lambda: self.file_seg_overlap.setValue(2)
        )
        self.hold_mode.toggled.connect(lambda: self.hold_mode_changed())
        self.start_music_path_set_default.clicked.connect(
            lambda: self.start_music_path.lineEdit().setText("assets/start.mp3")
        )
        self.stop_music_path_set_default.clicked.connect(
            lambda: self.stop_music_path.lineEdit().setText("assets/stop.mp3")
        )
        self.hint_while_recording_at_cursor_position.toggled.connect(
            lambda: self.hint_while_recording_at_cursor_position_changed()
        )
        self.convert_to_traditional_chinese_main.toggled.connect(
            lambda: self.convert_to_traditional_chinese_main_changed()
        )
        self.offline_translate_port_set_default.clicked.connect(
            lambda: self.offline_translate_port.setValue(6017)
        )
        self.threshold_set_default.clicked.connect(lambda: self.threshold.setValue(0.3))
        self.offline_translate_shortcut_set_default.clicked.connect(
            lambda: self.offline_translate_shortcut.lineEdit().setText("left shift")
        )
        self.trash_punc_set_default.clicked.connect(
            lambda: self.trash_punc.lineEdit().setText("Ôºå„ÄÇ,.")
        )
        self.paste.toggled.connect(lambda: self.paste_changed())
        self.save_audio.toggled.connect(lambda: self.save_audio_changed())
        self.audio_name_len_set_default.clicked.connect(
            lambda: self.audio_name_len.setValue(20)
        )
        self.offline_translate_and_replace_the_selected_text_shortcut_set_default.clicked.connect(
            lambda: self.offline_translate_and_replace_the_selected_text_shortcut.lineEdit().setText(
                "ctrl + alt + p"
            )
        )
        self.use_online_translate_function.toggled.connect(
            lambda: self.use_online_translate_function_changed()
        )
        self.online_translate_shortcut_set_default.clicked.connect(
            lambda: self.online_translate_shortcut.lineEdit().setText("right shift")
        )
        self.online_translate_target_languages_set_default.clicked.connect(
            lambda: self.online_translate_target_languages.menu().setIndex(0)
        )
        self.online_translate_and_replace_the_selected_text_shortcut_set_default.clicked.connect(
            lambda: self.online_translate_and_replace_the_selected_text_shortcut.lineEdit().setText(
                "ctrl + alt + ["
            )
        )
        self.use_search_selected_text_with_everything_function.toggled.connect(
            lambda: self.use_search_selected_text_with_everything_function_changed()
        )
        self.search_selected_text_with_everything_shortcut_set_default.clicked.connect(
            lambda: self.search_selected_text_with_everything_shortcut.lineEdit().setText(
                "ctrl + alt + f"
            )
        )
        self.save.longPressed.connect(self.save_config)
        # Êï∞ÊçÆÊ†°È™åÁªëÂÆö
        self.addr.lineEdit().editingFinished.connect(self.validate_addr)
        self.save.clicked.connect(self.validate_addr)
        self.save.clicked.connect(lambda: self.validate_vscode_exe_path(on_save=True))
        self.speech_recognition_shortcut.lineEdit().editingFinished.connect(
            self.validate_speech_recognition_shortcut
        )
        self.save.clicked.connect(self.validate_speech_recognition_shortcut)
        self.start_music_path.lineEdit().editingFinished.connect(
            self.validate_start_music_path
        )
        self.save.clicked.connect(self.validate_start_music_path)
        self.stop_music_path.lineEdit().editingFinished.connect(
            self.validate_stop_music_path
        )
        self.save.clicked.connect(self.validate_stop_music_path)
        self.offline_translate_shortcut.lineEdit().editingFinished.connect(
            self.validate_offline_translate_shortcut
        )
        self.save.clicked.connect(self.validate_offline_translate_shortcut)
        self.offline_translate_and_replace_the_selected_text_shortcut.lineEdit().editingFinished.connect(
            self.validate_offline_translate_and_replace_the_selected_text_shortcut
        )
        self.save.clicked.connect(
            self.validate_offline_translate_and_replace_the_selected_text_shortcut
        )
        self.online_translate_shortcut.lineEdit().editingFinished.connect(
            self.validate_online_translate_shortcut
        )
        self.save.clicked.connect(self.validate_online_translate_shortcut)
        self.online_translate_and_replace_the_selected_text_shortcut.lineEdit().editingFinished.connect(
            self.validate_online_translate_and_replace_the_selected_text_shortcut
        )
        self.save.clicked.connect(
            self.validate_online_translate_and_replace_the_selected_text_shortcut
        )
        self.search_selected_text_with_everything_shortcut.lineEdit().editingFinished.connect(
            self.validate_search_selected_text_with_everything_shortcut
        )
        self.save.clicked.connect(
            self.validate_search_selected_text_with_everything_shortcut
        )

    def validate_addr(self):
        ip: str = self.addr.lineEdit().text()
        is_valid, error = ValueCheck.is_local_listenable_ip(ip)
        from rich import print

        if is_valid:
            print(f"[green]{ip}[/green]")
        else:
            print(f"[red]{ip} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.addr.lineEdit().setText("127.0.0.1")
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="Ë¶ÅËøûÊé•ÁöÑÊúçÂä°Á´ØÂú∞ÂùÄÊ†ºÂºèÈîôËØØ",
                    text=f'{ip} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö"127.0.0.1"',
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_vscode_exe_path(self, on_save: bool = False):
        if not on_save:
            if not self.vscode_exe_path:
                return
        else:
            if not self.config_path:
                self.vscode_exe_path_selector.path_input.lineEdit().setText("")
                self.vscode_exe_path = ""
        is_valid, error = ValueCheck.is_file_exist(self.vscode_exe_path, ".exe")
        from rich import print

        if is_valid:
            print(f"[green]{self.vscode_exe_path}[/green]")
        else:
            print(f"[red]{self.vscode_exe_path} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.vscode_exe_path_selector.path_input.lineEdit().setText("")
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="VSCode ÂèØÊâßË°åÊñá‰ª∂‰ΩçÁΩÆÈîôËØØ",
                    text=f"{self.vscode_exe_path} - {error}\nÂ∑≤Ê∏ÖÁ©∫ÔºåËØ∑ÈáçÊñ∞ËÆæÁΩÆ\nÊàñËÄÖ‰∏ç‰ΩøÁî® ü§ì Open Home Folder With VSCode ÂäüËÉΩ",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_speech_recognition_shortcut(self):
        shortcut: str = self.speech_recognition_shortcut.lineEdit().text()
        is_valid, error = ValueCheck.is_hotkey(shortcut)
        from rich import print

        if is_valid:
            print(f"[green]{shortcut}[/green]")
        else:
            print(f"[red]{shortcut} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.speech_recognition_shortcut.lineEdit().setText("caps lock")
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="ËØ≠Èü≥ËØÜÂà´Âø´Êç∑ÈîÆÊ†ºÂºèÈîôËØØ",
                    text=f"{shortcut} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúcaps lock‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_start_music_path(self):
        path: str = self.start_music_path.lineEdit().text()
        is_valid, error = ValueCheck.is_file_exist(path, ".mp3")
        from rich import print

        if is_valid:
            print(f"[green]{path}[/green]")
        else:
            print(f"[red]{path} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.start_music_path.lineEdit().setText("assets/start.mp3")
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="ÂêØÂä®Èü≥‰πêÊñá‰ª∂‰ΩçÁΩÆÈîôËØØ",
                    text=f"{path} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúassets/start.mp3‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_stop_music_path(self):
        path: str = self.stop_music_path.lineEdit().text()
        is_valid, error = ValueCheck.is_file_exist(path, ".mp3")
        from rich import print

        if is_valid:
            print(f"[green]{path}[/green]")
        else:
            print(f"[red]{path} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.stop_music_path.lineEdit().setText("assets/stop.mp3")
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="ÂÅúÊ≠¢Èü≥‰πêÊñá‰ª∂‰ΩçÁΩÆÈîôËØØ",
                    text=f"{path} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúassets/stop.mp3‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_offline_translate_shortcut(self):
        shortcut: str = self.offline_translate_shortcut.lineEdit().text()
        is_valid, error = ValueCheck.is_hotkey(shortcut)
        from rich import print

        if is_valid:
            print(f"[green]{shortcut}[/green]")
        else:
            print(f"[red]{shortcut} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.offline_translate_shortcut.lineEdit().setText("left shift")
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="Á¶ªÁ∫øÁøªËØëÂø´Êç∑ÈîÆÊ†ºÂºèÈîôËØØ",
                    text=f"{shortcut} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúleft shift‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_offline_translate_and_replace_the_selected_text_shortcut(self):
        shortcut: str = self.offline_translate_and_replace_the_selected_text_shortcut.lineEdit().text()
        is_valid, error = ValueCheck.is_hotkey(shortcut)
        from rich import print

        if is_valid:
            print(f"[green]{shortcut}[/green]")
        else:
            print(f"[red]{shortcut} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.offline_translate_and_replace_the_selected_text_shortcut.lineEdit().setText(
                "ctrl + alt + p"
            )
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="Á¶ªÁ∫øÁøªËØëÂπ∂ÊõøÊç¢ÈÄâ‰∏≠ÊñáÊú¨Âø´Êç∑ÈîÆÊ†ºÂºèÈîôËØØ",
                    text=f"{shortcut} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúctrl + alt + p‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_online_translate_shortcut(self):
        shortcut: str = self.online_translate_shortcut.lineEdit().text()
        is_valid, error = ValueCheck.is_hotkey(shortcut)
        from rich import print

        if is_valid:
            print(f"[green]{shortcut}[/green]")
        else:
            print(f"[red]{shortcut} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.online_translate_shortcut.lineEdit().setText("right shift")
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="Âú®Á∫øÁøªËØëÂø´Êç∑ÈîÆÊ†ºÂºèÈîôËØØ",
                    text=f"{shortcut} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúright shift‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_online_translate_and_replace_the_selected_text_shortcut(self):
        shortcut: str = self.online_translate_and_replace_the_selected_text_shortcut.lineEdit().text()
        is_valid, error = ValueCheck.is_hotkey(shortcut)
        from rich import print

        if is_valid:
            print(f"[green]{shortcut}[/green]")
        else:
            print(f"[red]{shortcut} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.online_translate_and_replace_the_selected_text_shortcut.lineEdit().setText(
                "ctrl + alt + ["
            )
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="Âú®Á∫øÁøªËØëÂπ∂ÊõøÊç¢ÈÄâ‰∏≠ÊñáÊú¨Âø´Êç∑ÈîÆÊ†ºÂºèÈîôËØØ",
                    text=f"{shortcut} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúctrl + alt + [‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def validate_search_selected_text_with_everything_shortcut(self):
        shortcut: str = (
            self.search_selected_text_with_everything_shortcut.lineEdit().text()
        )
        is_valid, error = ValueCheck.is_hotkey(shortcut)
        from rich import print

        if is_valid:
            print(f"[green]{shortcut}[/green]")
        else:
            print(f"[red]{shortcut} - {error if error else 'Êó†Êïà'}[/red]")

        if error:
            self.search_selected_text_with_everything_shortcut.lineEdit().setText(
                "ctrl + alt + f"
            )
            try:
                SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                    title="ÊêúÁ¥¢ÈÄâ‰∏≠ÊñáÊú¨‰∏é Everything Âø´Êç∑ÈîÆÊ†ºÂºèÈîôËØØ",
                    text=f"{shortcut} - {error}\nÂ∑≤‰øÆÊîπ‰∏∫ÈªòËÆ§ÂÄºÔºö‚Äúctrl + alt + f‚Äù",
                    msg_type=3,
                    icon=SiGlobal.siui.iconpack.get("ic_fluent_warning_regular"),
                    fold_after=5000,
                )
            except ValueError:
                pass

    def init_ui(self):
        self.setPadding(64)
        self.setScrollMaximumWidth(1000)
        self.setScrollAlignment(Qt.AlignLeft)
        self.setTitle("ÂÆ¢Êà∑Á´ØÈÖçÁΩÆ")

        # ÂàõÂª∫Êéß‰ª∂ÁªÑ
        self.titled_widgets_group = SiTitledWidgetGroup(self)
        self.titled_widgets_group.setSpacing(32)
        self.titled_widgets_group.setAdjustWidgetsSize(True)

        # ‰øùÂ≠òÈÖçÁΩÆÊåâÈíÆ
        with self.titled_widgets_group as group:
            self.save = SiLongPressButtonRefactor(self)
            self.save.setSvgIcon(SiGlobal.siui.iconpack.get("ic_fluent_save_filled"))
            self.save.setIconSize(QSize(32, 32))
            self.save.setText("\t‰øùÂ≠ò ÂÆ¢Êà∑Á´Ø ÈÖçÁΩÆ")
            self.save.setFont(QFont("Microsoft YaHei", 16))
            self.save.setToolTip(
                "ÁÇπÂáªÊåâÈíÆËøõË°åÊï∞ÊçÆÊ†ºÂºèÊ£ÄÊü•\nÈïøÊåâ‰ª•Á°ÆËÆ§Â∞ÜÊï∞ÊçÆÂÜôÂÖ•ÈÖçÁΩÆÊñá‰ª∂\n‰øùÂ≠òÈÖçÁΩÆÂêéËØ∑ÊâãÂä®ÈáçÂêØ ÊúçÂä°Á´Ø/ÂÆ¢Êà∑Á´Ø ‰ª•Âä†ËΩΩÊñ∞ÈÖçÁΩÆÁîüÊïà"
            )
            self.save.resize(420, 64)
            self.save_container = SiDenseVContainer(self)
            self.save_container.setAlignment(Qt.AlignCenter)
            self.save_container.addWidget(self.save)
            group.addWidget(self.save_container)

        with self.titled_widgets_group as group:
            group.addTitle("ÈÄöÁî®")

            # Ë¶ÅËøûÊé•ÁöÑÊúçÂä°Á´ØÂú∞ÂùÄ
            self.addr = SiLineEditWithDeletionButton(self)
            self.addr.resize(256, 32)
            self.addr.lineEdit().setText(self.config["client"]["addr"])
            self.addr_set_default = SetDefaultButton(self)
            self.addr_linear_attaching = SiOptionCardLinear(self)
            self.addr_linear_attaching.setTitle(
                "Ë¶ÅËøûÊé•ÁöÑÊúçÂä°Á´ØÂú∞ÂùÄ", 'ÈªòËÆ§ÂÄºÔºö"127.0.0.1" Êú¨Âú∞Âú∞ÂùÄ'
            )
            self.addr_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_globe_location_regular")
            )
            self.addr_linear_attaching.addWidget(self.addr_set_default)
            self.addr_linear_attaching.addWidget(self.addr)

            # ÂêØÂä®ÂêéÊòØÂê¶Ëá™Âä®Áº©Â∞èËá≥ÊâòÁõò
            self.shrink_automatically_to_tray = SiSwitch(self)
            self.shrink_automatically_to_tray.setChecked(
                self.config["client"]["shrink_automatically_to_tray"]
            )
            self.shrink_automatically_to_tray_linear_attaching = SiOptionCardLinear(
                self
            )
            self.shrink_automatically_to_tray_linear_attaching.setTitle(
                "ÂêØÂä®ÂêéËá™Âä®Áº©Â∞èËá≥ÊâòÁõò"
            )
            self.shrink_automatically_to_tray_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_phone_footer_arrow_down_regular")
            )
            self.shrink_automatically_to_tray_linear_attaching.addWidget(
                self.shrink_automatically_to_tray
            )

            # Âè™ÂÖÅËÆ∏ËøêË°å‰∏ÄÊ¨°ÔºåÁ¶ÅÊ≠¢Â§öÂºÄ
            self.only_run_once = SiSwitch(self)
            self.only_run_once.setChecked(self.config["client"]["only_run_once"])
            self.only_run_once_linear_attaching = SiOptionCardLinear(self)
            self.only_run_once_linear_attaching.setTitle("Á¶ÅÊ≠¢Â§öÂºÄ", "Âè™ÂÖÅËÆ∏ËøêË°å‰∏ÄÊ¨°")
            self.only_run_once_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_star_one_quarter_filled")
            )
            self.only_run_once_linear_attaching.addWidget(self.only_run_once)

            # ËÆæÁΩÆ VSCode ÂèØÊâßË°åÊñá‰ª∂‰ΩçÁΩÆ
            # Áî®‰∫éÈÄöËøáÂÆ¢Êà∑Á´ØÊâòÁõòÂõæÊ†áÂè≥ÈîÆËèúÂçïÈ°π View Â≠êËèúÂçïÈ°π
            # ü§ì Open Home Folder With VSCode
            # ‰ΩøÁî® VSCode Âø´ÈÄüÊâìÂºÄ CapsWriter ‰∏ªÁõÆÂΩï
            # Êñπ‰æøË∞ÉËØï
            self.vscode_exe_path_selector = SelectPath(
                self,
                title="VSCode ÂèØÊâßË°åÊñá‰ª∂‰ΩçÁΩÆ",
                label_text="Áî®‰∫éÈÄöËøáÂÆ¢Êà∑Á´ØÊâòÁõòÂõæÊ†áÂè≥ÈîÆËèúÂçïÈ°π View Â≠êËèúÂçïÈ°π ‚Äúü§ì Open Home Folder With VSCode‚Äù\n‰ΩøÁî® VSCode Âø´ÈÄüÊâìÂºÄ CapsWriter ‰∏ªÁõÆÂΩï\nÊñπ‰æøË∞ÉËØï",
                default_path=self.config["client"]["vscode_exe_path"],
                file_filter="Executables (*.exe)",
                mode="file",
            )

            # ËÆæÁΩÆÈ°π
            self.general_container = SiDenseVContainer(self)
            self.general_container.setFixedWidth(700)
            self.general_container.setAdjustWidgetsSize(True)
            self.general_container.addWidget(self.addr_linear_attaching)
            self.general_container.addWidget(
                self.shrink_automatically_to_tray_linear_attaching
            )
            self.general_container.addWidget(self.only_run_once_linear_attaching)
            self.general_container.addWidget(self.vscode_exe_path_selector)
            group.addWidget(self.general_container)

        with self.titled_widgets_group as group:
            group.addTitle("ËØ≠Èü≥ËØÜÂà´")

            # ÊéßÂà∂ÂΩïÈü≥ÁöÑÂø´Êç∑ÈîÆÔºåÈªòËÆ§ÊòØ "caps lock"
            self.speech_recognition_shortcut = SiLineEditWithDeletionButton(self)
            self.speech_recognition_shortcut.resize(256, 32)
            self.speech_recognition_shortcut.lineEdit().setText(
                self.config["client"]["speech_recognition_shortcut"]
            )
            self.speech_recognition_shortcut_set_default = SetDefaultButton(self)
            self.speech_recognition_shortcut_linear_attaching = SiOptionCardLinear(self)
            self.speech_recognition_shortcut_linear_attaching.setTitle(
                "ÊéßÂà∂ÂΩïÈü≥ÁöÑÂø´Êç∑ÈîÆ", 'ÈªòËÆ§ÂÄºÔºö"caps lock"'
            )
            self.speech_recognition_shortcut_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.speech_recognition_shortcut_linear_attaching.addWidget(
                self.speech_recognition_shortcut_set_default
            )
            self.speech_recognition_shortcut_linear_attaching.addWidget(
                self.speech_recognition_shortcut
            )
            # Âè™Âú®Êåâ‰∏ãÂΩïÈü≥Âø´Êç∑ÈîÆÊó∂ÂêØÁî®È∫¶ÂÖãÈ£é
            # Âª∫ËÆÆÂêØÁî®ÔºåÊúâ‰∫õËìùÁâôËÄ≥Êú∫ÂΩïÈü≥Êó∂Êó†Ê≥ïÊí≠Êîæ
            # ËÄå‰∏îÂêØÁî®ÂêéÔºåÂàáÊç¢ÈªòËÆ§È∫¶ÂÖãÈ£é‰πü‰∏çÁî®ÈáçÂêØÂÆ¢Êà∑Á´Ø
            # ÊØîÂ¶Ç‰ªéËìùÁâôËÄ≥Êú∫Êç¢ÂõûÁ¨îËÆ∞Êú¨ÁîµËÑëÈªòËÆ§È∫¶ÂÖãÈ£é
            # Áº∫ÁÇπÂ∞±ÊòØËæìÂÖ•ÁöÑÊó∂ÂÄôÂèØËÉΩ‰ºöÊÖ¢‰∫õ
            # ÊØïÁ´üË¶ÅÂÖàÂª∫Á´ã‰∏éÈ∫¶ÂÖãÈ£éÁöÑËøûÊé•
            self.only_enable_microphones_when_pressed_record_shortcut = SiSwitch(self)
            self.only_enable_microphones_when_pressed_record_shortcut.setChecked(
                self.config["client"][
                    "only_enable_microphones_when_pressed_record_shortcut"
                ]
            )
            self.only_enable_microphones_when_pressed_record_shortcut_linear_attaching = SiOptionCardLinear(
                self
            )
            self.only_enable_microphones_when_pressed_record_shortcut_linear_attaching.setTitle(
                "Âè™Âú®Êåâ‰∏ãÂΩïÈü≥Âø´Êç∑ÈîÆÊó∂ÂêØÁî®È∫¶ÂÖãÈ£é",
                "Âª∫ËÆÆÂêØÁî®\nÊúâ‰∫õËìùÁâôËÄ≥Êú∫ÂΩïÈü≥Êó∂Êó†Ê≥ïÊí≠Êîæ\nËÄå‰∏îÂêØÁî®Âêé\nÂàáÊç¢ÈªòËÆ§È∫¶ÂÖãÈ£é‰πü‰∏çÁî®ÈáçÂêØÂÆ¢Êà∑Á´Ø\nÊØîÂ¶Ç‰ªéËìùÁâôËÄ≥Êú∫Êç¢ÂõûÁ¨îËÆ∞Êú¨ÁîµËÑëÈªòËÆ§È∫¶ÂÖãÈ£é\nÁº∫ÁÇπÂ∞±ÊòØËæìÂÖ•ÁöÑÊó∂ÂÄôÂèØËÉΩ‰ºöÊÖ¢‰∫õ\nÊØïÁ´üË¶ÅÂÖàÂª∫Á´ã‰∏éÈ∫¶ÂÖãÈ£éÁöÑËøûÊé•",
            )
            self.only_enable_microphones_when_pressed_record_shortcut_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_mic_record_regular")
            )
            self.only_enable_microphones_when_pressed_record_shortcut_linear_attaching.addWidget(
                self.only_enable_microphones_when_pressed_record_shortcut
            )

            # ËØ≠Èü≥ËØÜÂà´ÊúçÂä°Á´ØÂè£
            self.speech_recognition_port = SiIntSpinBox(self)
            self.speech_recognition_port.resize(256, 32)
            self.speech_recognition_port.setMinimum(1024)
            self.speech_recognition_port.setMaximum(65535)
            self.speech_recognition_port.setValue(
                int(self.config["client"]["speech_recognition_port"])
            )
            self.speech_recognition_port_set_default = SetDefaultButton(self)
            self.speech_recognition_port_linear_attaching = SiOptionCardLinear(self)
            self.speech_recognition_port_linear_attaching.setTitle(
                "ËØ≠Èü≥ËØÜÂà´ÊúçÂä°Á´ØÂè£", 'ÈªòËÆ§ÂÄºÔºö"6016"\nÁ´ØÂè£Âè∑ËåÉÂõ¥ 1024-65535'
            )
            self.speech_recognition_port_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_globe_location_regular")
            )
            self.speech_recognition_port_linear_attaching.addWidget(
                self.speech_recognition_port_set_default
            )
            self.speech_recognition_port_linear_attaching.addWidget(
                self.speech_recognition_port
            )
            # È∫¶ÂÖãÈ£éÂê¨ÂÜôÊó∂ÂàÜÊÆµÈïøÂ∫¶Ôºö15 Áßí
            self.mic_seg_duration = SiIntSpinBox(self)
            self.mic_seg_duration.resize(256, 32)
            self.mic_seg_duration.setMinimum(10)
            self.mic_seg_duration.setMaximum(60)
            self.mic_seg_duration.setValue(self.config["client"]["mic_seg_duration"])
            self.mic_seg_duration_set_default = SetDefaultButton(self)
            self.mic_seg_duration_linear_attaching = SiOptionCardLinear(self)
            self.mic_seg_duration_linear_attaching.setTitle(
                "È∫¶ÂÖãÈ£éÂê¨ÂÜôÊó∂ÂàÜÊÆµÈïøÂ∫¶", 'ÈªòËÆ§ÂÄºÔºö"15" Áßí'
            )
            self.mic_seg_duration_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_timer_regular")
            )
            self.mic_seg_duration_linear_attaching.addWidget(
                self.mic_seg_duration_set_default
            )
            self.mic_seg_duration_linear_attaching.addWidget(self.mic_seg_duration)

            # È∫¶ÂÖãÈ£éÂê¨ÂÜôÊó∂ÂàÜÊÆµÈáçÂè†Ôºö2 Áßí
            self.mic_seg_overlap = SiIntSpinBox(self)
            self.mic_seg_overlap.resize(256, 32)
            self.mic_seg_overlap.setMinimum(0)
            self.mic_seg_overlap.setMaximum(10)
            self.mic_seg_overlap.setValue(self.config["client"]["mic_seg_overlap"])
            self.mic_seg_overlap_set_default = SetDefaultButton(self)
            self.mic_seg_overlap_linear_attaching = SiOptionCardLinear(self)
            self.mic_seg_overlap_linear_attaching.setTitle(
                "È∫¶ÂÖãÈ£éÂê¨ÂÜôÊó∂ÂàÜÊÆµÈáçÂè†", 'ÈªòËÆ§ÂÄºÔºö"2" Áßí'
            )
            self.mic_seg_overlap_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_timer_regular")
            )
            self.mic_seg_overlap_linear_attaching.addWidget(
                self.mic_seg_overlap_set_default
            )
            self.mic_seg_overlap_linear_attaching.addWidget(self.mic_seg_overlap)

            # ËΩ¨ÂΩïÊñá‰ª∂Êó∂ÂàÜÊÆµÈïøÂ∫¶Ôºö25 Áßí
            self.file_seg_duration = SiIntSpinBox(self)
            self.file_seg_duration.resize(256, 32)
            self.file_seg_duration.setMinimum(10)
            self.file_seg_duration.setMaximum(60)
            self.file_seg_duration.setValue(self.config["client"]["file_seg_duration"])
            self.file_seg_duration_set_default = SetDefaultButton(self)
            self.file_seg_duration_linear_attaching = SiOptionCardLinear(self)
            self.file_seg_duration_linear_attaching.setTitle(
                "ËΩ¨ÂΩïÊñá‰ª∂Êó∂ÂàÜÊÆµÈïøÂ∫¶", 'ÈªòËÆ§ÂÄºÔºö"25" Áßí'
            )
            self.file_seg_duration_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_timer_regular")
            )
            self.file_seg_duration_linear_attaching.addWidget(
                self.file_seg_duration_set_default
            )
            self.file_seg_duration_linear_attaching.addWidget(self.file_seg_duration)

            # ËΩ¨ÂΩïÊñá‰ª∂Êó∂ÂàÜÊÆµÈáçÂè†Ôºö2 Áßí
            self.file_seg_overlap = SiIntSpinBox(self)
            self.file_seg_overlap.resize(256, 32)
            self.file_seg_overlap.setMinimum(1)
            self.file_seg_overlap.setMaximum(60)
            self.file_seg_overlap.setValue(self.config["client"]["file_seg_overlap"])
            self.file_seg_overlap_set_default = SetDefaultButton(self)
            self.file_seg_overlap_linear_attaching = SiOptionCardLinear(self)
            self.file_seg_overlap_linear_attaching.setTitle(
                "ËΩ¨ÂΩïÊñá‰ª∂Êó∂ÂàÜÊÆµÈáçÂè†", 'ÈªòËÆ§ÂÄºÔºö"2" Áßí'
            )
            self.file_seg_overlap_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_timer_regular")
            )
            self.file_seg_overlap_linear_attaching.addWidget(
                self.file_seg_overlap_set_default
            )
            self.file_seg_overlap_linear_attaching.addWidget(self.file_seg_overlap)

            # ÈïøÊåâÊ®°ÂºèÔºåÊåâ‰∏ãÂΩïÈü≥ÔºåÊùæÂºÄÂÅúÊ≠¢ÔºåÂÉèÂØπËÆ≤Êú∫‰∏ÄÊ†∑Áî®
            # Êîπ‰∏∫ FalseÔºåÂàôÂÖ≥Èó≠ÈïøÊåâÊ®°ÂºèÔºå‰πüÂ∞±ÊòØÂçïÂáªÊ®°Âºè
            # Âç≥ÔºöÂçïÂáªÂΩïÈü≥ÔºåÂÜçÊ¨°ÂçïÂáªÂÅúÊ≠¢
            # ‰∏îÔºöÈïøÊåâ‰ºöÊâßË°åÂéüÊú¨ÁöÑÂçïÂáªÂäüËÉΩ
            self.hold_mode = SiSwitch(self)
            self.hold_mode.setChecked(self.config["client"]["hold_mode"])
            self.hold_mode_linear_attaching = SiOptionCardLinear(self)
            self.hold_mode_linear_attaching.setTitle(
                "ÈïøÊåâÊ®°Âºè",
                "Êåâ‰∏ãÂΩïÈü≥\nÊùæÂºÄÂÅúÊ≠¢\nÂÉèÂØπËÆ≤Êú∫‰∏ÄÊ†∑Áî®\nÊîπ‰∏∫ False\nÂàôÂÖ≥Èó≠ÈïøÊåâÊ®°Âºè\n‰πüÂ∞±ÊòØÂçïÂáªÊ®°Âºè\nÂç≥ÔºöÂçïÂáªÂΩïÈü≥\nÂÜçÊ¨°ÂçïÂáªÂÅúÊ≠¢\n‰∏îÔºöÈïøÊåâ‰ºöÊâßË°åÂéüÊú¨ÁöÑÂçïÂáªÂäüËÉΩ",
            )
            self.hold_mode_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.hold_mode_linear_attaching.addWidget(self.hold_mode)

            # ÂºÄÂßã‰ªªÂä°Êó∂ÊòØÂê¶Êí≠ÊîæÊèêÁ§∫Èü≥
            # ÈúÄË¶Å ffplay.exe
            self.play_start_music = SiSwitch(self)
            self.play_start_music.setChecked(self.config["client"]["play_start_music"])
            self.play_start_music_linear_attaching = SiOptionCardLinear(self)
            self.play_start_music_linear_attaching.setTitle(
                "ÂºÄÂßã‰ªªÂä°Êó∂Êí≠ÊîæÊèêÁ§∫Èü≥",
                'ÈúÄË¶Å ffplay.exe\nÊèêÁ§∫Èü≥Ë∑ØÂæÑÔºö"assets/start.mp3"',
            )
            self.play_start_music_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_music_note_1_filled")
            )
            self.play_start_music_linear_attaching.addWidget(self.play_start_music)

            # ÂºÄÂßã‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÊñá‰ª∂Ë∑ØÂæÑ
            self.start_music_path = SiLineEditWithDeletionButton(self)
            self.start_music_path.resize(256, 32)
            self.start_music_path.lineEdit().setText(
                self.config["client"]["start_music_path"]
            )
            self.start_music_path_set_default = SetDefaultButton(self)
            self.start_music_path_linear_attaching = SiOptionCardLinear(self)
            self.start_music_path_linear_attaching.setTitle(
                "ÂºÄÂßã‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÊñá‰ª∂Ë∑ØÂæÑ", 'ÈªòËÆ§ÂÄºÔºö"assets/start.mp3"'
            )
            self.start_music_path_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_music_note_1_filled")
            )
            self.start_music_path_linear_attaching.addWidget(
                self.start_music_path_set_default
            )
            self.start_music_path_linear_attaching.addWidget(self.start_music_path)

            # ÂºÄÂßã‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÈü≥ÈáèÔºå0 ~ 100 ‰πãÈó¥
            self.start_music_volume = SiSlider(self)
            self.start_music_volume.resize(512, 48)
            self.start_music_volume.setMinimum(0)
            self.start_music_volume.setMaximum(100)
            self.start_music_volume.setValue(
                int(self.config["client"]["start_music_volume"])
            )
            self.start_music_volume_linear_attaching = SiOptionCardLinear(self)
            self.start_music_volume_linear_attaching.setTitle("ÂºÄÂßã‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÈü≥Èáè")
            self.start_music_volume_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_music_note_1_filled")
            )
            self.start_music_volume_linear_attaching.addWidget(self.start_music_volume)

            # ÁªìÊùü‰ªªÂä°Êó∂ÊòØÂê¶Êí≠ÊîæÊèêÁ§∫Èü≥
            # ÈúÄË¶Å ffplay.exe
            self.play_stop_music = SiSwitch(self)
            self.play_stop_music.setChecked(self.config["client"]["play_stop_music"])
            self.play_stop_music_linear_attaching = SiOptionCardLinear(self)
            self.play_stop_music_linear_attaching.setTitle(
                "ÁªìÊùü‰ªªÂä°Êó∂Êí≠ÊîæÊèêÁ§∫Èü≥",
                'ÈúÄË¶Å ffplay.exe\nÊèêÁ§∫Èü≥Ë∑ØÂæÑÔºö"assets/stop.mp3"',
            )
            self.play_stop_music_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_music_note_1_filled")
            )
            self.play_stop_music_linear_attaching.addWidget(self.play_stop_music)

            # ÁªìÊùü‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÊñá‰ª∂Ë∑ØÂæÑ
            self.stop_music_path = SiLineEditWithDeletionButton(self)
            self.stop_music_path.resize(256, 32)
            self.stop_music_path.lineEdit().setText(
                self.config["client"]["stop_music_path"]
            )
            self.stop_music_path_set_default = SetDefaultButton(self)
            self.stop_music_path_linear_attaching = SiOptionCardLinear(self)
            self.stop_music_path_linear_attaching.setTitle(
                "ÁªìÊùü‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÊñá‰ª∂Ë∑ØÂæÑ", 'ÈªòËÆ§ÂÄºÔºö"assets/stop.mp3"'
            )
            self.stop_music_path_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_music_note_1_filled")
            )
            self.stop_music_path_linear_attaching.addWidget(
                self.stop_music_path_set_default
            )
            self.stop_music_path_linear_attaching.addWidget(self.stop_music_path)

            # ÁªìÊùü‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÈü≥ÈáèÔºå0 ~ 100 ‰πãÈó¥
            self.stop_music_volume = SiSlider(self)
            self.stop_music_volume.resize(512, 48)
            self.stop_music_volume.setMinimum(0)
            self.stop_music_volume.setMaximum(100)
            self.stop_music_volume.setValue(
                int(self.config["client"]["stop_music_volume"])
            )
            self.stop_music_volume_linear_attaching = SiOptionCardLinear(self)
            self.stop_music_volume_linear_attaching.setTitle("ÁªìÊùü‰ªªÂä°ÊèêÁ§∫Èü≥ÁöÑÈü≥Èáè")
            self.stop_music_volume_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_music_note_1_filled")
            )
            self.stop_music_volume_linear_attaching.addWidget(self.stop_music_volume)

            # ÂΩïÈü≥Êó∂ÊòØÂê¶ÈùôÈü≥ÂÖ∂‰ªñÈü≥È¢ëÊí≠Êîæ
            self.mute_other_audio = SiSwitch(self)
            self.mute_other_audio.setChecked(self.config["client"]["mute_other_audio"])
            self.mute_other_audio_linear_attaching = SiOptionCardLinear(self)
            self.mute_other_audio_linear_attaching.setTitle(
                "ÂΩïÈü≥Êó∂ÈùôÈü≥ÂÖ∂‰ªñÈü≥È¢ëÊí≠Êîæ",
            )
            self.mute_other_audio_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_speaker_mute_regular")
            )
            self.mute_other_audio_linear_attaching.addWidget(self.mute_other_audio)

            # ÂΩïÈü≥Êó∂ÊòØÂê¶ÊöÇÂÅúÂÖ∂‰ªñÈü≥È¢ëÊí≠Êîæ
            self.pause_other_audio = SiSwitch(self)
            self.pause_other_audio.setChecked(
                self.config["client"]["pause_other_audio"]
            )
            self.pause_other_audio_linear_attaching = SiOptionCardLinear(self)
            self.pause_other_audio_linear_attaching.setTitle(
                "ÂΩïÈü≥Êó∂ÊöÇÂÅúÂÖ∂‰ªñÈü≥È¢ëÊí≠Êîæ",
            )
            self.pause_other_audio_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_pause_regular")
            )
            self.pause_other_audio_linear_attaching.addWidget(self.pause_other_audio)

            # ÊòØÂê¶ÂêØÁî®Âü∫‰∫é AHK ÁöÑËæìÂÖ•ÂÖâÊ†á‰ΩçÁΩÆÁöÑËæìÂÖ•Áä∂ÊÄÅÊèêÁ§∫ÂäüËÉΩ
            self.hint_while_recording_at_edit_position_powered_by_ahk = SiSwitch(self)
            self.hint_while_recording_at_edit_position_powered_by_ahk.setChecked(
                self.config["client"][
                    "hint_while_recording_at_edit_position_powered_by_ahk"
                ]
            )
            self.hint_while_recording_at_edit_position_powered_by_ahk_linear_attaching = SiOptionCardLinear(
                self
            )
            self.hint_while_recording_at_edit_position_powered_by_ahk_linear_attaching.setTitle(
                "Âú®ËæìÂÖ•ÂÖâÊ†á‰ΩçÁΩÆÊòæÁ§∫ ‚Äú‚ú¶ËØ≠Èü≥ËæìÂÖ•‰∏≠‚Äß‚Äß‚Äß‚Äù Áä∂ÊÄÅÊèêÁ§∫",
                "Âü∫‰∫é AHK ÁöÑËæìÂÖ•ÂÖâÊ†á‰ΩçÁΩÆÁöÑËæìÂÖ•Áä∂ÊÄÅÊèêÁ§∫ÂäüËÉΩ\nÊõ¥Â§öÁõ∏ÂÖ≥ÈÖçÁΩÆÂú® ‚Äúhint_while_recording.ini‚Äù ",
            )
            self.hint_while_recording_at_edit_position_powered_by_ahk_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_emoji_hint_regular")
            )
            self.hint_while_recording_at_edit_position_powered_by_ahk_linear_attaching.addWidget(
                self.hint_while_recording_at_edit_position_powered_by_ahk
            )

            # ÊòØÂê¶ÂêØÁî®Ë∑üÈöèÈº†Ê†áÂÖâÊ†á‰ΩçÁΩÆÁöÑÊñ∞ÁâàËæìÂÖ•Áä∂ÊÄÅÊèêÁ§∫ÂäüËÉΩ
            self.hint_while_recording_at_cursor_position = SiSwitch(self)
            self.hint_while_recording_at_cursor_position.setChecked(
                self.config["client"]["hint_while_recording_at_cursor_position"]
            )
            self.hint_while_recording_at_cursor_position_linear_attaching = (
                SiOptionCardLinear(self)
            )
            self.hint_while_recording_at_cursor_position_linear_attaching.setTitle(
                "Âú®Èº†Ê†áÂÖâÊ†á‰ΩçÁΩÆÊòæÁ§∫ È∫¶ÂÖãÈ£éÂõæÊ°à ÁöÑËæìÂÖ•Áä∂ÊÄÅÊèêÁ§∫", "Âü∫‰∫é Python PySide6"
            )
            self.hint_while_recording_at_cursor_position_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_emoji_hint_regular")
            )
            self.hint_while_recording_at_cursor_position_linear_attaching.addWidget(
                self.hint_while_recording_at_cursor_position
            )

            # ÁõëÊµãÈ∫¶ÂÖãÈ£éÊòØÂê¶Âú®‰ΩøÁî®ÁöÑÊñπÂºè
            # "ÊåâÈîÆ" Êàñ "Ê≥®ÂÜåË°®"
            self.check_microphone_usage_by = SiComboBox(self)
            self.check_microphone_usage_by.resize(325, 32)
            self.check_microphone_usage_by.addOption("Ê≥®ÂÜåË°®")
            self.check_microphone_usage_by.addOption("ÊåâÈîÆ")
            self.check_microphone_usage_by.menu().setShowIcon(False)
            if self.config["client"]["check_microphone_usage_by"] == "Ê≥®ÂÜåË°®":
                self.check_microphone_usage_by.menu().setIndex(0)
            else:
                self.check_microphone_usage_by.menu().setIndex(1)
            self.check_microphone_usage_by_linear_attaching = SiOptionCardLinear(self)
            self.check_microphone_usage_by_linear_attaching.setTitle(
                "ÁõëÊµãÈ∫¶ÂÖãÈ£éÊòØÂê¶Âú®‰ΩøÁî®ÁöÑÊñπÂºè",
                "ÊåâÈîÆÔºöÈÄöËøáÊåâ‰∏ãÂΩïÈü≥Âø´Êç∑ÈîÆÊù•Ê£ÄÊµãÈ∫¶ÂÖãÈ£éÊòØÂê¶Âú®‰ΩøÁî®\nÊ≥®ÂÜåË°®ÔºöÈÄöËøáËØªÂèñÊ≥®ÂÜåË°®Êù•Ê£ÄÊµãÈ∫¶ÂÖãÈ£éÊòØÂê¶Âú®‰ΩøÁî®",
            )
            self.check_microphone_usage_by_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_settings_light")
            )
            self.check_microphone_usage_by_linear_attaching.addWidget(
                self.check_microphone_usage_by
            )

            # ÊòØÂê¶ÈòªÂ°ûÊåâÈîÆ‰∫ã‰ª∂ÔºàËÆ©ÂÖ∂ÂÆÉÁ®ãÂ∫èÊî∂‰∏çÂà∞Ëøô‰∏™ÊåâÈîÆÊ∂àÊÅØÔºâ
            self.suppress = SiSwitch(self)
            self.suppress.setChecked(self.config["client"]["suppress"])
            self.suppress_linear_attaching = SiOptionCardLinear(self)
            self.suppress_linear_attaching.setTitle(
                "ÈòªÂ°ûÊåâÈîÆ‰∫ã‰ª∂",
                "Â¶ÇÊûúÂºÄÂêØ\nÂàôÊåâ‰∏ãÂΩïÈü≥Âø´Êç∑ÈîÆÂêé\nÂÖ∂ÂÆÉÁ®ãÂ∫èÊó†Ê≥ïÊé•Êî∂Âà∞Ëøô‰∏™ÊåâÈîÆÊ∂àÊÅØ",
            )
            self.suppress_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.suppress_linear_attaching.addWidget(self.suppress)

            # ÂΩïÈü≥ÂÆåÊàêÔºåÊùæÂºÄÊåâÈîÆÂêéÔºåÊòØÂê¶Ëá™Âä®ÂÜçÊåâ‰∏ÄÈÅçÔºå‰ª•ÊÅ¢Â§ç CapsLock Êàñ Shift Á≠âÊåâÈîÆ‰πãÂâçÁöÑÁä∂ÊÄÅ
            self.restore_key = SiSwitch(self)
            self.restore_key.setChecked(self.config["client"]["restore_key"])
            self.restore_key_linear_attaching = SiOptionCardLinear(self)
            self.restore_key_linear_attaching.setTitle(
                "ÊÅ¢Â§çÊåâÈîÆÁä∂ÊÄÅ",
                "ÂΩïÈü≥ÂÆåÊàê\nÊùæÂºÄÊåâÈîÆÂêé\nÊòØÂê¶Ëá™Âä®ÂÜçÊåâ‰∏ÄÈÅç\n‰ª•ÊÅ¢Â§ç CapsLock Êàñ Shift Á≠âÊåâÈîÆ‰πãÂâçÁöÑÁä∂ÊÄÅ",
            )
            self.restore_key_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.restore_key_linear_attaching.addWidget(self.restore_key)

            # Êåâ‰∏ãÂø´Êç∑ÈîÆÂêéÔºåËß¶ÂèëËØ≠Èü≥ËØÜÂà´ÁöÑÊó∂Èó¥ÈòàÂÄº
            self.threshold = SiDoubleSpinBox(self)
            self.threshold.resize(256, 32)
            self.threshold.setMinimum(0.1)
            self.threshold.setMaximum(2.0)
            self.threshold.setSingleStep(0.1)
            self.threshold.setValue(self.config["client"]["threshold"])
            self.threshold_set_default = SetDefaultButton(self)
            self.threshold_linear_attaching = SiOptionCardLinear(self)
            self.threshold_linear_attaching.setTitle(
                "Ëß¶ÂèëËØ≠Èü≥ËØÜÂà´ÁöÑÊó∂Èó¥ÈòàÂÄº",
                "Êåâ‰∏ãÂø´Êç∑ÈîÆÂêé\nËß¶ÂèëËØ≠Èü≥ËØÜÂà´ÁöÑÊó∂Èó¥ÈòàÂÄº\nÂçï‰ΩçÔºöÁßí\nÈªòËÆ§ÂÄºÔºö0.3 Áßí\nÂ¶ÇÊûúËÆæÁΩÆÁöÑÂÄºËøáÂ∞è\nÂèØËÉΩ‰ºöÈÄ†ÊàêËØØËß¶Âèë",
            )
            self.threshold_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_timer_regular")
            )
            self.threshold_linear_attaching.addWidget(self.threshold_set_default)
            self.threshold_linear_attaching.addWidget(self.threshold)

            # ËØÜÂà´ÁªìÊûúË¶ÅÊ∂àÈô§ÁöÑÊú´Â∞æÊ†áÁÇπ
            self.trash_punc = SiLineEditWithDeletionButton(self)
            self.trash_punc.resize(256, 32)
            self.trash_punc.lineEdit().setText(self.config["client"]["trash_punc"])
            self.trash_punc_set_default = SetDefaultButton(self)
            self.trash_punc_linear_attaching = SiOptionCardLinear(self)
            self.trash_punc_linear_attaching.setTitle(
                "ËØÜÂà´ÁªìÊûúË¶ÅÊ∂àÈô§ÁöÑÊú´Â∞æÊ†áÁÇπ",
                'ËØÜÂà´ÁªìÊûúË¶ÅÊ∂àÈô§ÁöÑÊú´Â∞æÊ†áÁÇπ\nÈªòËÆ§ÂÄºÔºö"Ôºå„ÄÇ,."',
            )
            self.trash_punc_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_delete_regular")
            )
            self.trash_punc_linear_attaching.addWidget(self.trash_punc_set_default)
            self.trash_punc_linear_attaching.addWidget(self.trash_punc)

            # ÊòØÂê¶ÂêØÁî®‰∏≠ÊñáÁÉ≠ËØçÊõøÊç¢Ôºå‰∏≠ÊñáÁÉ≠ËØçÂ≠òÂÇ®Âú® hot_zh.txt Êñá‰ª∂Èáå
            self.hot_zh = SiSwitch(self)
            self.hot_zh.setChecked(self.config["client"]["hot_zh"])
            self.hot_zh_linear_attaching = SiOptionCardLinear(self)
            self.hot_zh_linear_attaching.setTitle(
                "‰∏≠ÊñáÁÉ≠ËØçÊõøÊç¢",
                "‰∏≠ÊñáÁÉ≠ËØçÂ≠òÂÇ®Âú® hot_zh.txt Êñá‰ª∂Èáå",
            )
            self.hot_zh_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_ruler_regular")
            )
            self.hot_zh_linear_attaching.addWidget(self.hot_zh)

            # Â§öÈü≥Â≠óÂåπÈÖç
            self.Â§öÈü≥Â≠ó = SiSwitch(self)
            self.Â§öÈü≥Â≠ó.setChecked(self.config["client"]["Â§öÈü≥Â≠ó"])
            self.Â§öÈü≥Â≠ó_linear_attaching = SiOptionCardLinear(self)
            self.Â§öÈü≥Â≠ó_linear_attaching.setTitle(
                "Â§öÈü≥Â≠óÂåπÈÖç",
                "Âú®ËØÜÂà´ÁªìÊûú‰∏≠ÂåπÈÖçÂ§öÈü≥Â≠ó",
            )
            self.Â§öÈü≥Â≠ó_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_ruler_regular")
            )
            self.Â§öÈü≥Â≠ó_linear_attaching.addWidget(self.Â§öÈü≥Â≠ó)

            # Â£∞Ë∞ÉÂåπÈÖç
            self.Â£∞Ë∞É = SiSwitch(self)
            self.Â£∞Ë∞É.setChecked(self.config["client"]["Â£∞Ë∞É"])
            self.Â£∞Ë∞É_linear_attaching = SiOptionCardLinear(self)
            self.Â£∞Ë∞É_linear_attaching.setTitle(
                "Â£∞Ë∞ÉÂåπÈÖç",
                "‰æãÂ¶ÇÔºöÂ¶ÇÊûúÂêØÁî®Ôºå„ÄåÈªÑÁ´†„ÄçÂ∞±ËÉΩÂåπÈÖç„ÄåÊÖåÂº†„Äç",
            )
            self.Â£∞Ë∞É_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_ruler_regular")
            )
            self.Â£∞Ë∞É_linear_attaching.addWidget(self.Â£∞Ë∞É)

            # Â∞Ü ****Âπ¥ Â§ßÂÜôÊ±âÂ≠óÊõøÊç¢‰∏∫ÈòøÊãâ‰ºØÊï∞Â≠ó ****Âπ¥Ôºå‰æãÂ¶Ç‰∏ÄÂÖ´ÂõõÂÖ´Âπ¥ ÊõøÊç¢‰∏∫ 1848 Âπ¥
            self.arabic_year_number = SiSwitch(self)
            self.arabic_year_number.setChecked(
                self.config["client"]["arabic_year_number"]
            )
            self.arabic_year_number_linear_attaching = SiOptionCardLinear(self)
            self.arabic_year_number_linear_attaching.setTitle(
                "Â∞ÜÂπ¥‰ªΩÊï∞Â≠óÊõøÊç¢‰∏∫ÈòøÊãâ‰ºØÊï∞Â≠ó",
                "‰æãÂ¶ÇÔºö‰∏ÄÂÖ´ÂõõÂÖ´Âπ¥ ÊõøÊç¢‰∏∫ 1848 Âπ¥",
            )
            self.arabic_year_number_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_ruler_regular")
            )
            self.arabic_year_number_linear_attaching.addWidget(self.arabic_year_number)

            # ÊòØÂê¶ÂêØÁî®Ëã±ÊñáÁÉ≠ËØçÊõøÊç¢ÔºåËã±ÊñáÁÉ≠ËØçÂ≠òÂÇ®Âú® hot_en.txt Êñá‰ª∂Èáå
            self.hot_en = SiSwitch(self)
            self.hot_en.setChecked(self.config["client"]["hot_en"])
            self.hot_en_linear_attaching = SiOptionCardLinear(self)
            self.hot_en_linear_attaching.setTitle(
                "Ëã±ÊñáÁÉ≠ËØçÊõøÊç¢",
                "Ëã±ÊñáÁÉ≠ËØçÂ≠òÂÇ®Âú® hot_en.txt Êñá‰ª∂Èáå",
            )
            self.hot_en_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_ruler_regular")
            )
            self.hot_en_linear_attaching.addWidget(self.hot_en)

            # ÊòØÂê¶ÂêØÁî®Ëá™ÂÆö‰πâËßÑÂàôÊõøÊç¢ÔºåËá™ÂÆö‰πâËßÑÂàôÂ≠òÂÇ®Âú® hot_rule.txt Êñá‰ª∂Èáå
            self.hot_rule = SiSwitch(self)
            self.hot_rule.setChecked(self.config["client"]["hot_rule"])
            self.hot_rule_linear_attaching = SiOptionCardLinear(self)
            self.hot_rule_linear_attaching.setTitle(
                "Ëá™ÂÆö‰πâËßÑÂàôÊõøÊç¢",
                "Ëá™ÂÆö‰πâËßÑÂàôÂ≠òÂÇ®Âú® hot_rule.txt Êñá‰ª∂Èáå",
            )
            self.hot_rule_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_ruler_regular")
            )
            self.hot_rule_linear_attaching.addWidget(self.hot_rule)

            # ÊòØÂê¶ÂêØÁî®ÂÖ≥ÈîÆËØçÊó•ËÆ∞ÂäüËÉΩÔºåËá™ÂÆö‰πâÂÖ≥ÈîÆËØçÂ≠òÂÇ®Âú® keyword.txt Êñá‰ª∂Èáå
            self.hot_kwd = SiSwitch(self)
            self.hot_kwd.setChecked(self.config["client"]["hot_kwd"])
            self.hot_kwd_linear_attaching = SiOptionCardLinear(self)
            self.hot_kwd_linear_attaching.setTitle(
                "ÂêØÁî®ÂÖ≥ÈîÆËØçÊó•ËÆ∞ÂäüËÉΩ",
                "Ëá™ÂÆö‰πâÂÖ≥ÈîÆËØçÂ≠òÂÇ®Âú® keyword.txt Êñá‰ª∂Èáå",
            )
            self.hot_kwd_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_note_edit_regular")
            )
            self.hot_kwd_linear_attaching.addWidget(self.hot_kwd)

            # ÊòØÂê¶‰ª•ÂÜôÂÖ•Ââ™ÂàáÊùøÁÑ∂ÂêéÊ®°Êãü Ctrl-V Á≤òË¥¥ÁöÑÊñπÂºèËæìÂá∫ÁªìÊûú
            self.paste = SiSwitch(self)
            self.paste.setChecked(self.config["client"]["paste"])
            self.paste_linear_attaching = SiOptionCardLinear(self)
            self.paste_linear_attaching.setTitle(
                "‰ª•ÂÜôÂÖ•Ââ™ÂàáÊùøÁÑ∂ÂêéÊ®°Êãü Ctrl-V Á≤òË¥¥ÁöÑÊñπÂºèËæìÂá∫ÁªìÊûú",
                "Â¶ÇÊûúÂÖ≥Èó≠ÔºåÂàô‰ª•Ê®°ÊãüÈîÆÁõòËæìÂÖ•ÁöÑÊñπÂºèËæìÂá∫ÁªìÊûú",
            )
            self.paste_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_clipboard_paste_filled")
            )
            self.paste_linear_attaching.addWidget(self.paste)

            # Ê®°ÊãüÁ≤òË¥¥ÂêéÊòØÂê¶ÊÅ¢Â§çÂâ™Ë¥¥Êùø
            self.restore_clipboard_after_paste = SiSwitch(self)
            self.restore_clipboard_after_paste.setChecked(
                self.config["client"]["restore_clipboard_after_paste"]
            )
            self.restore_clipboard_after_paste_linear_attaching = SiOptionCardLinear(
                self
            )
            self.restore_clipboard_after_paste_linear_attaching.setTitle(
                "Ê®°ÊãüÁ≤òË¥¥ÂêéÊòØÂê¶ÊÅ¢Â§çÂâ™Ë¥¥Êùø"
            )
            self.restore_clipboard_after_paste_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_clipboard_paste_filled")
            )
            self.restore_clipboard_after_paste_linear_attaching.addWidget(
                self.restore_clipboard_after_paste
            )

            # ÊòØÂê¶‰øùÂ≠òÂΩïÈü≥Êñá‰ª∂
            self.save_audio = SiSwitch(self)
            self.save_audio.setChecked(self.config["client"]["save_audio"])
            self.save_audio_linear_attaching = SiOptionCardLinear(self)
            self.save_audio_linear_attaching.setTitle("‰øùÂ≠òÂΩïÈü≥Êñá‰ª∂Âà∞Êú¨Âú∞Á£ÅÁõò")
            self.save_audio_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_save_regular")
            )
            self.save_audio_linear_attaching.addWidget(self.save_audio)

            # Â∞ÜÂΩïÈü≥ËØÜÂà´ÁªìÊûúÁöÑÂâçÂ§öÂ∞ë‰∏™Â≠óÂ≠òÂÇ®Âà∞ÂΩïÈü≥Êñá‰ª∂Âêç‰∏≠ÔºåÂª∫ËÆÆ‰∏çË¶ÅË∂ÖËøá 200
            self.audio_name_len = SiIntSpinBox(self)
            self.audio_name_len.resize(256, 32)
            self.audio_name_len.setMinimum(10)
            self.audio_name_len.setMaximum(200)
            self.audio_name_len.setValue(self.config["client"]["audio_name_len"])
            self.audio_name_len_set_default = SetDefaultButton(self)
            self.audio_name_len_linear_attaching = SiOptionCardLinear(self)
            self.audio_name_len_linear_attaching.setTitle(
                "ÂΩïÈü≥Êñá‰ª∂ÂêçÈïøÂ∫¶",
                "Â∞ÜÂΩïÈü≥ËØÜÂà´ÁªìÊûúÁöÑÂâçÂ§öÂ∞ë‰∏™Â≠óÂ≠òÂÇ®Âà∞ÂΩïÈü≥Êñá‰ª∂Âêç‰∏≠\nÂª∫ËÆÆ‰∏çË¶ÅË∂ÖËøá 200",
            )
            self.audio_name_len_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_document_text_regular")
            )
            self.audio_name_len_linear_attaching.addWidget(
                self.audio_name_len_set_default
            )
            self.audio_name_len_linear_attaching.addWidget(self.audio_name_len)

            # Â¶ÇÊûúÁî®Êà∑Â∑≤ÂÆâË£Ö ffmpegÔºåË∞ÉÁî® ffmpeg ÂΩïÈü≥Êó∂ËæìÂá∫ mp3 Ê†ºÂºèÁöÑÈü≥È¢ëÊñá‰ª∂ÔºåÂ§ßÂ§ßÂáèÂ∞èÊñá‰ª∂‰ΩìÁßØÔºåÂáèÂ∞ëÁ£ÅÁõòÂç†Áî®
            self.reduce_audio_files = SiSwitch(self)
            self.reduce_audio_files.setChecked(
                self.config["client"]["reduce_audio_files"]
            )
            self.reduce_audio_files_linear_attaching = SiOptionCardLinear(self)
            self.reduce_audio_files_linear_attaching.setTitle(
                "‰ΩøÁî® ffmpeg ÂéãÁº©ÂΩïÈü≥Êñá‰ª∂",
                "Â¶ÇÊûúÁî®Êà∑Â∑≤ÂÆâË£Ö ffmpeg\nË∞ÉÁî® ffmpeg ÂΩïÈü≥Êó∂ËæìÂá∫ mp3 Ê†ºÂºèÁöÑÈü≥È¢ëÊñá‰ª∂\nÂ§ßÂ§ßÂáèÂ∞èÊñá‰ª∂‰ΩìÁßØ\nÂáèÂ∞ëÁ£ÅÁõòÂç†Áî®",
            )
            self.reduce_audio_files_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_folder_zip_regular")
            )
            self.reduce_audio_files_linear_attaching.addWidget(self.reduce_audio_files)

            # ÊòØÂê¶Â∞ÜËÆ∞ÂΩïÂÜôÂÖ• Markdown Êñá‰ª∂
            self.save_markdown = SiSwitch(self)
            self.save_markdown.setChecked(self.config["client"]["save_markdown"])
            self.save_markdown_linear_attaching = SiOptionCardLinear(self)
            self.save_markdown_linear_attaching.setTitle("Â∞ÜËÆ∞ÂΩïÂÜôÂÖ• Markdown Êñá‰ª∂")
            self.save_markdown_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_save_regular")
            )
            self.save_markdown_linear_attaching.addWidget(self.save_markdown)

            # ËÆæÁΩÆÈ°π
            self.speech_recognition_container = SiDenseVContainer(self)
            self.speech_recognition_container.setFixedWidth(700)
            self.speech_recognition_container.setAdjustWidgetsSize(True)
            self.speech_recognition_container.addWidget(
                self.speech_recognition_shortcut_linear_attaching
            )

            self.speech_recognition_container.addWidget(
                self.only_enable_microphones_when_pressed_record_shortcut_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.speech_recognition_port_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.mic_seg_duration_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.mic_seg_overlap_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.file_seg_duration_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.file_seg_overlap_linear_attaching
            )
            self.speech_recognition_container.addWidget(self.hold_mode_linear_attaching)
            self.hold_mode_changed()
            self.speech_recognition_container.addWidget(
                self.play_start_music_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.start_music_path_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.start_music_volume_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.play_stop_music_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.stop_music_path_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.stop_music_volume_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.mute_other_audio_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.pause_other_audio_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.hint_while_recording_at_edit_position_powered_by_ahk_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.hint_while_recording_at_cursor_position_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.check_microphone_usage_by_linear_attaching
            )
            self.speech_recognition_container.addWidget(self.suppress_linear_attaching)
            self.speech_recognition_container.addWidget(
                self.restore_key_linear_attaching
            )
            self.speech_recognition_container.addWidget(self.threshold_linear_attaching)
            self.speech_recognition_container.addWidget(
                self.trash_punc_linear_attaching
            )
            self.speech_recognition_container.addWidget(self.hot_zh_linear_attaching)
            self.speech_recognition_container.addWidget(self.Â§öÈü≥Â≠ó_linear_attaching)
            self.speech_recognition_container.addWidget(self.Â£∞Ë∞É_linear_attaching)
            self.speech_recognition_container.addWidget(
                self.arabic_year_number_linear_attaching
            )
            self.speech_recognition_container.addWidget(self.hot_en_linear_attaching)
            self.speech_recognition_container.addWidget(self.hot_rule_linear_attaching)
            self.speech_recognition_container.addWidget(self.hot_kwd_linear_attaching)
            self.speech_recognition_container.addWidget(self.paste_linear_attaching)
            self.paste_changed()
            self.speech_recognition_container.addWidget(
                self.restore_clipboard_after_paste_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.save_audio_linear_attaching
            )
            self.save_audio_changed()
            self.speech_recognition_container.addWidget(
                self.audio_name_len_linear_attaching
            )
            self.speech_recognition_container.addWidget(
                self.reduce_audio_files_linear_attaching
            )

            self.speech_recognition_container.addWidget(
                self.save_markdown_linear_attaching
            )
            group.addWidget(self.speech_recognition_container)

        with self.titled_widgets_group as group:
            group.addTitle("ÁÆÄÁπÅËΩ¨Êç¢")

            # ÈªòËÆ§‰ΩøÁî®ÁÆÄ/ÁπÅ‰Ωì‰∏≠Êñá‰Ωú‰∏∫‰∏ªË¶ÅËæìÂá∫
            self.convert_to_traditional_chinese_main = SiToggleButtonRefactor(self)
            if self.config["client"]["convert_to_traditional_chinese_main"] == "ÁÆÄ":
                self.convert_to_traditional_chinese_main.setChecked(False)
            else:
                self.convert_to_traditional_chinese_main.setChecked(True)
            # self.convert_to_traditional_chinese_main.adjustSize()
            self.convert_to_traditional_chinese_main.setFont(
                QFont("Microsoft YaHei", 16)
            )
            self.convert_to_traditional_chinese_main.resize(100, 50)
            self.convert_to_traditional_chinese_main_linear_attaching = (
                SiOptionCardLinear(self)
            )
            self.convert_to_traditional_chinese_main_linear_attaching.setTitle(
                "ÈªòËÆ§‰ΩøÁî®ÁÆÄ/ÁπÅ‰Ωì‰∏≠Êñá‰Ωú‰∏∫‰∏ªË¶ÅËæìÂá∫"
            )
            self.convert_to_traditional_chinese_main_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_translate_auto_regular")
            )
            self.convert_to_traditional_chinese_main_linear_attaching.addWidget(
                self.convert_to_traditional_chinese_main
            )
            # ÊòØÂê¶ÂêØÁî®ÂèåÂáª `ÂΩïÈü≥ÈîÆ` ‰∏¥Êó∂ËΩ¨Êç¢ `ÁÆÄ/ÁπÅ` ‰Ωì‰∏≠ÊñáËæìÂá∫ÁöÑÂäüËÉΩ
            self.enable_double_click_opposite_state = SiSwitch(self)
            self.enable_double_click_opposite_state.setChecked(
                self.config["client"]["enable_double_click_opposite_state"]
            )
            self.enable_double_click_opposite_state_linear_attaching = (
                SiOptionCardLinear(self)
            )
            self.enable_double_click_opposite_state_linear_attaching.setTitle(
                "ÂèåÂáª `ÂΩïÈü≥ÈîÆ` ‰∏¥Êó∂ËΩ¨Êç¢ `ÁÆÄ/ÁπÅ` ‰Ωì‰∏≠ÊñáËæìÂá∫ÁöÑÂäüËÉΩ"
            )
            self.enable_double_click_opposite_state_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_translate_auto_regular")
            )
            self.enable_double_click_opposite_state_linear_attaching.addWidget(
                self.enable_double_click_opposite_state
            )

            # ËÆæÁΩÆÈ°π
            self.convert_to_traditional_chinese_container = SiDenseVContainer(self)
            self.convert_to_traditional_chinese_container.setFixedWidth(700)
            self.convert_to_traditional_chinese_container.setAdjustWidgetsSize(True)
            self.convert_to_traditional_chinese_container.addWidget(
                self.convert_to_traditional_chinese_main_linear_attaching
            )
            self.convert_to_traditional_chinese_main_changed()
            self.convert_to_traditional_chinese_container.addWidget(
                self.enable_double_click_opposite_state_linear_attaching
            )
            group.addWidget(self.convert_to_traditional_chinese_container)

        with self.titled_widgets_group as group:
            group.addTitle("Á¶ªÁ∫øÁøªËØë")

            # ÊòØÂê¶ÂêØÁî®Á¶ªÁ∫øÁøªËØëÂäüËÉΩ
            self.use_offline_translate_function = SiSwitch(self)
            self.use_offline_translate_function.setChecked(
                self.config["client"]["use_offline_translate_function"]
            )
            self.use_offline_translate_function_linear_attaching = SiOptionCardLinear(
                self
            )
            self.use_offline_translate_function_linear_attaching.setTitle(
                "ÂêØÁî®Á¶ªÁ∫øÁøªËØëÂäüËÉΩ"
            )
            self.use_offline_translate_function_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_translate_auto_regular")
            )
            self.use_offline_translate_function_linear_attaching.addWidget(
                self.use_offline_translate_function
            )
            # Á¶ªÁ∫øÁøªËØëÊúçÂä°Á´ØÂè£
            self.offline_translate_port = SiIntSpinBox(self)
            self.offline_translate_port.resize(256, 32)
            self.offline_translate_port.setMinimum(1024)
            self.offline_translate_port.setMaximum(65535)
            self.offline_translate_port.setValue(
                int(self.config["client"]["offline_translate_port"])
            )
            self.offline_translate_port_set_default = SetDefaultButton(self)
            self.offline_translate_port_linear_attaching = SiOptionCardLinear(self)
            self.offline_translate_port_linear_attaching.setTitle(
                "Á¶ªÁ∫øÁøªËØëÊúçÂä°Á´ØÂè£", 'ÈªòËÆ§ÂÄºÔºö"6017"\nÁ´ØÂè£Âè∑ËåÉÂõ¥ 1024-65535'
            )
            self.offline_translate_port_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_globe_location_regular")
            )
            self.offline_translate_port_linear_attaching.addWidget(
                self.offline_translate_port_set_default
            )
            self.offline_translate_port_linear_attaching.addWidget(
                self.offline_translate_port
            )
            # ÊéßÂà∂Á¶ªÁ∫øÁøªËØëÁöÑÂø´Êç∑ÈîÆÔºåÈªòËÆ§ÊòØ "left shift"ÔºåÊåâ‰Ωè Left Shift ÂÜçÊåâ CapsLock ËøõË°åÁ¶ªÁ∫øÁøªËØë
            self.offline_translate_shortcut = SiLineEditWithDeletionButton(self)
            self.offline_translate_shortcut.resize(256, 32)
            self.offline_translate_shortcut.lineEdit().setText(
                self.config["client"]["offline_translate_shortcut"]
            )
            self.offline_translate_shortcut_set_default = SetDefaultButton(self)
            self.offline_translate_shortcut_linear_attaching = SiOptionCardLinear(self)
            self.offline_translate_shortcut_linear_attaching.setTitle(
                "Á¶ªÁ∫øÁøªËØëÁöÑÂø´Êç∑ÈîÆ",
                'ÈªòËÆ§ÂÄºÔºö"left shift"\nÊåâ‰Ωè Left Shift ÂÜçÊåâ CapsLock ËøõË°åÁ¶ªÁ∫øÁøªËØë',
            )
            self.offline_translate_shortcut_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.offline_translate_shortcut_linear_attaching.addWidget(
                self.offline_translate_shortcut_set_default
            )
            self.offline_translate_shortcut_linear_attaching.addWidget(
                self.offline_translate_shortcut
            )
            # ÊéßÂà∂Á¶ªÁ∫øÁøªËØëÂ∞ÜÂÖâÊ†áÈÄâ‰∏≠ÁöÑ‰∏≠ÊñáÁøªËØëÂπ∂ÊõøÊç¢‰∏∫Ëã±ÊñáÁöÑÂø´Êç∑ÈîÆ
            # Â¶ÇÊûúÊú™ÈÄâ‰∏≠‰ªª‰ΩïÊñáÂ≠óÔºå‰ºöÂ∞ÜÂâ™Ë¥¥ÊùøÁöÑÊñáÂ≠óÁøªËØë‰∏∫Ëã±ÊñáÂπ∂Á≤òË¥¥
            self.offline_translate_and_replace_the_selected_text_shortcut = (
                SiLineEditWithDeletionButton(self)
            )
            self.offline_translate_and_replace_the_selected_text_shortcut.resize(
                256, 32
            )
            self.offline_translate_and_replace_the_selected_text_shortcut.lineEdit().setText(
                self.config["client"][
                    "offline_translate_and_replace_the_selected_text_shortcut"
                ]
            )
            self.offline_translate_and_replace_the_selected_text_shortcut_set_default = SetDefaultButton(
                self
            )
            self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching = SiOptionCardLinear(
                self
            )
            self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching.setTitle(
                "Â∞ÜÂÖâÊ†áÈÄâ‰∏≠ÁöÑ‰∏≠ÊñáÁøªËØëÂπ∂ÊõøÊç¢‰∏∫Ëã±ÊñáÁöÑÂø´Êç∑ÈîÆ",
                'ÈªòËÆ§ÂÄºÔºö"ctrl + alt + p"\nÊú™ÈÄâ‰∏≠‰ªª‰ΩïÊñáÂ≠óÊó∂\nÂ∞ÜÂâ™Ë¥¥ÊùøÁöÑÊñáÂ≠óÁøªËØë‰∏∫Ëã±ÊñáÂπ∂Á≤òË¥¥',
            )
            self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching.addWidget(
                self.offline_translate_and_replace_the_selected_text_shortcut_set_default
            )
            self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching.addWidget(
                self.offline_translate_and_replace_the_selected_text_shortcut
            )

            # ËÆæÁΩÆÈ°π
            self.offline_translate_container = SiDenseVContainer(self)
            self.offline_translate_container.setFixedWidth(700)
            self.offline_translate_container.setAdjustWidgetsSize(True)
            self.offline_translate_container.addWidget(
                self.use_offline_translate_function_linear_attaching
            )
            self.use_offline_translate_function_changed()
            self.offline_translate_container.addWidget(
                self.offline_translate_port_linear_attaching
            )
            self.offline_translate_container.addWidget(
                self.offline_translate_shortcut_linear_attaching
            )
            self.offline_translate_container.addWidget(
                self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching
            )
            group.addWidget(self.offline_translate_container)

        with self.titled_widgets_group as group:
            group.addTitle("Âú®Á∫øÁøªËØë")

            # ÊòØÂê¶ÂêØÁî®Âú®Á∫øÁøªËØëÂäüËÉΩ
            self.use_online_translate_function = SiSwitch(self)
            self.use_online_translate_function.setChecked(
                self.config["client"]["use_online_translate_function"]
            )
            self.use_online_translate_function_linear_attaching = SiOptionCardLinear(
                self
            )
            self.use_online_translate_function_linear_attaching.setTitle(
                "ÂêØÁî®Âú®Á∫øÁøªËØëÂäüËÉΩ"
            )
            self.use_online_translate_function_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_translate_regular")
            )
            self.use_online_translate_function_linear_attaching.addWidget(
                self.use_online_translate_function
            )
            # ÊéßÂà∂Âú®Á∫øÁøªËØëÁöÑÂø´Êç∑ÈîÆÔºåÈªòËÆ§ÊòØ Right ShiftÔºåÊåâ‰Ωè Right Shift ÂÜçÊåâ CapsLock ËøõË°åÂú®Á∫øÁøªËØë
            # Âú®Á∫øÁøªËØëÂü∫‰∫é DeepLXÔºåËøá‰∫éÈ¢ëÁπÅÁöÑËØ∑Ê±ÇÂèØËÉΩÂØºËá¥ IP Ë¢´Â∞Å
            # Â¶ÇÊûúÂá∫Áé∞ 429 ÈîôËØØÔºåÂàôË°®Á§∫‰Ω†ÁöÑ IP Ë¢´ DeepL ÊöÇÊó∂Â±èËîΩ‰∫ÜÔºåËØ∑‰∏çË¶ÅÂú®Áü≠Êó∂Èó¥ÂÜÖÈ¢ëÁπÅËØ∑Ê±Ç
            self.online_translate_shortcut = SiLineEditWithDeletionButton(self)
            self.online_translate_shortcut.resize(256, 32)
            self.online_translate_shortcut.lineEdit().setText(
                self.config["client"]["online_translate_shortcut"]
            )
            self.online_translate_shortcut_set_default = SetDefaultButton(self)
            self.online_translate_shortcut_linear_attaching = SiOptionCardLinear(self)
            self.online_translate_shortcut_linear_attaching.setTitle(
                "Âú®Á∫øÁøªËØëÁöÑÂø´Êç∑ÈîÆ",
                'ÈªòËÆ§ÂÄºÔºö"right shift"\nÊåâ‰Ωè Right Shift ÂÜçÊåâ CapsLock ËøõË°åÂú®Á∫øÁøªËØë',
            )
            self.online_translate_shortcut_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.online_translate_shortcut_linear_attaching.addWidget(
                self.online_translate_shortcut_set_default
            )
            self.online_translate_shortcut_linear_attaching.addWidget(
                self.online_translate_shortcut
            )
            # Âú®Á∫øÁøªËØëÁõÆÊ†áËØ≠Ë®Ä
            # Â∏∏Áî®ÁöÑ EN JA RUÔºåÊõ¥Â§öÈÄâÊã©ÂèÇËÄÉ https://www.deepl.com/docs-api/translate-text
            self.online_translate_target_languages = SiComboBox(self)
            self.online_translate_target_languages.resize(256, 32)
            self.online_translate_target_languages.addOption("JA")
            self.online_translate_target_languages.addOption("EN")
            self.online_translate_target_languages.addOption("RU")
            self.online_translate_target_languages.addOption("FR")
            self.online_translate_target_languages.addOption("KO")
            match self.config["client"]["online_translate_target_languages"]:
                case "JA":
                    self.online_translate_target_languages.menu().setIndex(0)
                case "EN":
                    self.online_translate_target_languages.menu().setIndex(1)
                case "RU":
                    self.online_translate_target_languages.menu().setIndex(2)
                case "FR":
                    self.online_translate_target_languages.menu().setIndex(3)
                case "KO":
                    self.online_translate_target_languages.menu().setIndex(4)
                case _:
                    self.online_translate_target_languages.addOption(
                        self.config["client"]["online_translate_target_languages"]
                    )
                    self.online_translate_target_languages.menu().setIndex(-1)
            self.online_translate_target_languages_set_default = SetDefaultButton(self)
            self.online_translate_target_languages_linear_attaching = (
                SiOptionCardLinear(self)
            )
            self.online_translate_target_languages_linear_attaching.setTitle(
                "Âú®Á∫øÁøªËØëÁõÆÊ†áËØ≠Ë®Ä",
                'ÈªòËÆ§ÂÄºÔºö"JA"\nÊõ¥Â§öÈÄâÊã©ÂèÇËÄÉ https://www.deepl.com/docs-api/translate-text ÊâãÂä®‰øÆÊîπ config.toml',
            )
            self.online_translate_target_languages_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_translate_regular")
            )
            self.online_translate_target_languages_linear_attaching.addWidget(
                self.online_translate_target_languages_set_default
            )
            self.online_translate_target_languages_linear_attaching.addWidget(
                self.online_translate_target_languages
            )
            # ÊéßÂà∂Âú®Á∫øÁøªËØëÂ∞ÜÂÖâÊ†áÈÄâ‰∏≠ÁöÑ‰∏≠ÊñáÁøªËØëÂπ∂ÊõøÊç¢‰∏∫Âú®Á∫øÁøªËØëÁõÆÊ†áËØ≠Ë®ÄÁöÑÂø´Êç∑ÈîÆ
            # Â¶ÇÊûúÊú™ÈÄâ‰∏≠‰ªª‰ΩïÊñáÂ≠óÔºå‰ºöÂ∞ÜÂâ™Ë¥¥ÊùøÁöÑÊñáÂ≠óÁøªËØë‰∏∫ÁõÆÊ†áËØ≠Ë®ÄÂπ∂Á≤òË¥¥
            self.online_translate_and_replace_the_selected_text_shortcut = (
                SiLineEditWithDeletionButton(self)
            )
            self.online_translate_and_replace_the_selected_text_shortcut.resize(256, 32)
            self.online_translate_and_replace_the_selected_text_shortcut.lineEdit().setText(
                self.config["client"][
                    "online_translate_and_replace_the_selected_text_shortcut"
                ]
            )
            self.online_translate_and_replace_the_selected_text_shortcut_set_default = (
                SetDefaultButton(self)
            )
            self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching = SiOptionCardLinear(
                self
            )
            self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching.setTitle(
                "Â∞ÜÂÖâÊ†áÈÄâ‰∏≠ÁöÑ‰∏≠ÊñáÁøªËØëÂπ∂ÊõøÊç¢‰∏∫ÁõÆÊ†áËØ≠Ë®ÄÁöÑÂø´Êç∑ÈîÆ",
                'ÈªòËÆ§ÂÄºÔºö"ctrl + alt + ["\nÊú™ÈÄâ‰∏≠‰ªª‰ΩïÊñáÂ≠óÊó∂\nÂ∞ÜÂâ™Ë¥¥ÊùøÁöÑÊñáÂ≠óÁøªËØë‰∏∫ÁõÆÊ†áËØ≠Ë®ÄÂπ∂Á≤òË¥¥',
            )
            self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching.addWidget(
                self.online_translate_and_replace_the_selected_text_shortcut_set_default
            )
            self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching.addWidget(
                self.online_translate_and_replace_the_selected_text_shortcut
            )

            # ËÆæÁΩÆÈ°π
            self.online_translate_container = SiDenseVContainer(self)
            self.online_translate_container.setFixedWidth(700)
            self.online_translate_container.setAdjustWidgetsSize(True)
            self.online_translate_container.addWidget(
                self.use_online_translate_function_linear_attaching
            )
            self.use_online_translate_function_changed()
            self.online_translate_container.addWidget(
                self.online_translate_shortcut_linear_attaching
            )
            self.online_translate_container.addWidget(
                self.online_translate_target_languages_linear_attaching
            )
            self.online_translate_container.addWidget(
                self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching
            )
            group.addWidget(self.online_translate_container)

        with self.titled_widgets_group as group:
            group.addTitle("‰ΩøÁî® Everything ÊêúÁ¥¢ÈÄâ‰∏≠ÊñáÂ≠ó")

            # ÊòØÂê¶ÂêØÁî®‰ΩøÁî® Everything ÊêúÁ¥¢ÈÄâ‰∏≠ÊñáÂ≠óÁöÑÂäüËÉΩ
            self.use_search_selected_text_with_everything_function = SiSwitch(self)
            self.use_search_selected_text_with_everything_function.setChecked(
                self.config["client"][
                    "use_search_selected_text_with_everything_function"
                ]
            )
            self.use_search_selected_text_with_everything_function_linear_attaching = (
                SiOptionCardLinear(self)
            )
            self.use_search_selected_text_with_everything_function_linear_attaching.setTitle(
                "Ë∞ÉÁî® Everything ÊêúÁ¥¢ÈÄâ‰∏≠ÁöÑÊñáÂ≠ó"
            )
            self.use_search_selected_text_with_everything_function_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_search_filled")
            )
            self.use_search_selected_text_with_everything_function_linear_attaching.addWidget(
                self.use_search_selected_text_with_everything_function
            )

            # ÊéßÂà∂‰ΩøÁî® Everything ÊêúÁ¥¢ÈÄâ‰∏≠ÊñáÂ≠óÁöÑÂø´Êç∑ÈîÆÔºåÈªòËÆ§ÊòØ "ctrl + alt + f"
            self.search_selected_text_with_everything_shortcut = (
                SiLineEditWithDeletionButton(self)
            )
            self.search_selected_text_with_everything_shortcut.resize(256, 32)
            self.search_selected_text_with_everything_shortcut.lineEdit().setText(
                self.config["client"]["search_selected_text_with_everything_shortcut"]
            )
            self.search_selected_text_with_everything_shortcut_set_default = (
                SetDefaultButton(self)
            )
            self.search_selected_text_with_everything_shortcut_linear_attaching = (
                SiOptionCardLinear(self)
            )
            self.search_selected_text_with_everything_shortcut_linear_attaching.setTitle(
                "‰ΩøÁî® Everything ÊêúÁ¥¢ÈÄâ‰∏≠ÊñáÂ≠óÁöÑÂø´Êç∑ÈîÆ", 'ÈªòËÆ§ÂÄºÔºö"ctrl + alt + f"'
            )
            self.search_selected_text_with_everything_shortcut_linear_attaching.load(
                SiGlobal.siui.iconpack.get("ic_fluent_keyboard_regular")
            )
            self.search_selected_text_with_everything_shortcut_linear_attaching.addWidget(
                self.search_selected_text_with_everything_shortcut_set_default
            )
            self.search_selected_text_with_everything_shortcut_linear_attaching.addWidget(
                self.search_selected_text_with_everything_shortcut
            )

            # ËÆæÁΩÆÈ°π
            self.search__with_everything_container = SiDenseVContainer(self)
            self.search__with_everything_container.setFixedWidth(700)
            self.search__with_everything_container.setAdjustWidgetsSize(True)
            self.search__with_everything_container.addWidget(
                self.use_search_selected_text_with_everything_function_linear_attaching
            )
            self.use_search_selected_text_with_everything_function_changed()
            self.search__with_everything_container.addWidget(
                self.search_selected_text_with_everything_shortcut_linear_attaching
            )
            group.addWidget(self.search__with_everything_container)

        # Ê∑ªÂä†È°µËÑöÁöÑÁ©∫ÁôΩ‰ª•Â¢ûÂä†ÁæéËßÇÊÄß
        self.titled_widgets_group.addPlaceholder(64)

        # ËÆæÁΩÆÊéß‰ª∂ÁªÑ‰∏∫È°µÈù¢ÂØπË±°
        self.setAttachment(self.titled_widgets_group)

    def on_vscode_exe_path_selected(self, path):
        self.vscode_exe_path = path
        print(f"VSCode exe path selected: {self.vscode_exe_path}")
        self.validate_vscode_exe_path()

    def hint_while_recording_at_cursor_position_changed(self):
        if self.hint_while_recording_at_cursor_position.isChecked():
            self.check_microphone_usage_by_linear_attaching.show()
        else:
            self.check_microphone_usage_by_linear_attaching.hide()

    def convert_to_traditional_chinese_main_changed(self):
        if self.convert_to_traditional_chinese_main.isChecked():
            self.convert_to_traditional_chinese_main.setText("ÁπÅ")
        else:
            self.convert_to_traditional_chinese_main.setText("ÁÆÄ")

    def paste_changed(self):
        if self.paste.isChecked():
            self.restore_clipboard_after_paste_linear_attaching.show()
        else:
            self.restore_clipboard_after_paste_linear_attaching.hide()

    def hold_mode_changed(self):
        if self.hold_mode.isChecked():
            self.suppress_linear_attaching.show()
        else:
            self.suppress_linear_attaching.hide()

    def save_audio_changed(self):
        if self.save_audio.isChecked():
            self.audio_name_len_linear_attaching.show()
            self.reduce_audio_files_linear_attaching.show()
        else:
            self.audio_name_len_linear_attaching.hide()
            self.reduce_audio_files_linear_attaching.hide()

    def use_search_selected_text_with_everything_function_changed(self):
        if self.use_search_selected_text_with_everything_function.isChecked():
            self.search_selected_text_with_everything_shortcut_linear_attaching.show()
        else:
            self.search_selected_text_with_everything_shortcut_linear_attaching.hide()

    def use_offline_translate_function_changed(self):
        if self.use_offline_translate_function.isChecked():
            self.offline_translate_port_linear_attaching.show()
            self.offline_translate_shortcut_linear_attaching.show()
            self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching.show()
        else:
            self.offline_translate_port_linear_attaching.hide()
            self.offline_translate_shortcut_linear_attaching.hide()
            self.offline_translate_and_replace_the_selected_text_shortcut_linear_attaching.hide()

    def use_online_translate_function_changed(self):
        if self.use_online_translate_function.isChecked():
            self.online_translate_shortcut_linear_attaching.show()
            self.online_translate_target_languages_linear_attaching.show()
            self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching.show()
        else:
            self.online_translate_shortcut_linear_attaching.hide()
            self.online_translate_target_languages_linear_attaching.hide()
            self.online_translate_and_replace_the_selected_text_shortcut_linear_attaching.hide()

    def save_config(self):
        def get_value_from_gui():
            self.config["client"]["addr"] = self.addr.line_edit.text()
            self.config["client"]["speech_recognition_port"] = str(
                self.speech_recognition_port.value()
            )
            self.config["client"]["offline_translate_port"] = str(
                self.offline_translate_port.value()
            )
            self.config["client"]["speech_recognition_shortcut"] = (
                self.speech_recognition_shortcut.line_edit.text()
            )
            self.config["client"]["use_offline_translate_function"] = (
                self.use_offline_translate_function.isChecked()
            )
            self.config["client"]["offline_translate_shortcut"] = (
                self.offline_translate_shortcut.line_edit.text()
            )
            self.config["client"][
                "offline_translate_and_replace_the_selected_text_shortcut"
            ] = self.offline_translate_and_replace_the_selected_text_shortcut.line_edit.text()
            self.config["client"]["use_online_translate_function"] = (
                self.use_online_translate_function.isChecked()
            )
            self.config["client"]["online_translate_shortcut"] = (
                self.online_translate_shortcut.line_edit.text()
            )
            self.config["client"]["online_translate_target_languages"] = (
                self.online_translate_target_languages.value_label.text()
            )
            self.config["client"][
                "online_translate_and_replace_the_selected_text_shortcut"
            ] = self.online_translate_and_replace_the_selected_text_shortcut.line_edit.text()
            self.config["client"][
                "use_search_selected_text_with_everything_function"
            ] = self.use_search_selected_text_with_everything_function.isChecked()
            self.config["client"]["search_selected_text_with_everything_shortcut"] = (
                self.search_selected_text_with_everything_shortcut.line_edit.text()
            )
            self.config["client"][
                "use_search_selected_text_with_everything_function"
            ] = self.use_search_selected_text_with_everything_function.isChecked()
            self.config["client"]["search_selected_text_with_everything_shortcut"] = (
                self.search_selected_text_with_everything_shortcut.line_edit.text()
            )
            self.config["client"]["hold_mode"] = self.hold_mode.isChecked()
            self.config["client"]["suppress"] = self.suppress.isChecked()
            self.config["client"]["restore_key"] = self.restore_key.isChecked()
            self.config["client"]["threshold"] = self.threshold.value()
            self.config["client"]["paste"] = self.paste.isChecked()
            self.config["client"]["restore_clipboard_after_paste"] = (
                self.restore_clipboard_after_paste.isChecked()
            )
            self.config["client"]["save_audio"] = self.save_audio.isChecked()
            self.config["client"]["save_markdown"] = self.save_markdown.isChecked()
            self.config["client"]["audio_name_len"] = self.audio_name_len.value()
            self.config["client"]["reduce_audio_files"] = (
                self.reduce_audio_files.isChecked()
            )
            self.config["client"]["trash_punc"] = self.trash_punc.line_edit.text()
            self.config["client"]["hot_zh"] = self.hot_zh.isChecked()
            self.config["client"]["Â§öÈü≥Â≠ó"] = self.Â§öÈü≥Â≠ó.isChecked()
            self.config["client"]["Â£∞Ë∞É"] = self.Â£∞Ë∞É.isChecked()
            self.config["client"]["hot_en"] = self.hot_en.isChecked()
            self.config["client"]["hot_rule"] = self.hot_rule.isChecked()
            self.config["client"]["hot_kwd"] = self.hot_kwd.isChecked()
            self.config["client"]["mic_seg_duration"] = self.mic_seg_duration.value()
            self.config["client"]["mic_seg_overlap"] = self.mic_seg_overlap.value()
            self.config["client"]["file_seg_duration"] = self.file_seg_duration.value()
            self.config["client"]["file_seg_overlap"] = self.file_seg_overlap.value()
            self.config["client"]["mute_other_audio"] = (
                self.mute_other_audio.isChecked()
            )
            self.config["client"]["pause_other_audio"] = (
                self.pause_other_audio.isChecked()
            )
            self.config["client"]["arabic_year_number"] = (
                self.arabic_year_number.isChecked()
            )
            self.config["client"]["shrink_automatically_to_tray"] = (
                self.shrink_automatically_to_tray.isChecked()
            )
            self.config["client"]["only_run_once"] = self.only_run_once.isChecked()
            self.config["client"][
                "only_enable_microphones_when_pressed_record_shortcut"
            ] = self.only_enable_microphones_when_pressed_record_shortcut.isChecked()
            self.config["client"]["vscode_exe_path"] = self.vscode_exe_path
            self.config["client"]["play_start_music"] = (
                self.play_start_music.isChecked()
            )
            self.config["client"]["start_music_path"] = (
                self.start_music_path.line_edit.text()
            )
            self.config["client"]["start_music_volume"] = str(
                self.start_music_volume.value()
            )
            self.config["client"]["play_stop_music"] = self.play_stop_music.isChecked()
            self.config["client"]["stop_music_path"] = (
                self.stop_music_path.line_edit.text()
            )
            self.config["client"]["stop_music_volume"] = str(
                self.stop_music_volume.value()
            )
            self.config["client"][
                "hint_while_recording_at_edit_position_powered_by_ahk"
            ] = self.hint_while_recording_at_edit_position_powered_by_ahk.isChecked()
            self.config["client"]["hint_while_recording_at_cursor_position"] = (
                self.hint_while_recording_at_cursor_position.isChecked()
            )
            self.config["client"]["check_microphone_usage_by"] = (
                self.check_microphone_usage_by.value_label.text()
            )
            self.config["client"]["enable_double_click_opposite_state"] = (
                self.enable_double_click_opposite_state.isChecked()
            )
            self.config["client"]["convert_to_traditional_chinese_main"] = (
                "ÁπÅ" if self.convert_to_traditional_chinese_main.isChecked() else "ÁÆÄ"
            )

        def print_config():
            from rich.console import Console
            from rich.table import Table

            from util.edit_config_gui.clearly_type import clearly_type

            console = Console()
            table = Table(title="‰øùÂ≠ò Paraformer ËØ≠Èü≥ËØÜÂà´Ê®°ÂûãÂèÇÊï∞ÈÖçÁΩÆ")
            table.add_column("Â±ûÊÄßÂêç", style="cyan")
            table.add_column("Á±ªÂûã", style="magenta")
            table.add_column("ÂÄº", style="green")
            table.add_row(
                "addr",
                clearly_type(self.config["client"]["addr"]),
                str(self.config["client"]["addr"]),
            )
            table.add_row(
                "speech_recognition_port",
                clearly_type(self.config["client"]["speech_recognition_port"]),
                str(self.config["client"]["speech_recognition_port"]),
            )
            table.add_row(
                "offline_translate_port",
                clearly_type(self.config["client"]["offline_translate_port"]),
                str(self.config["client"]["offline_translate_port"]),
            )
            table.add_row(
                "speech_recognition_shortcut",
                clearly_type(self.config["client"]["speech_recognition_shortcut"]),
                str(self.config["client"]["speech_recognition_shortcut"]),
            )
            table.add_row(
                "use_offline_translate_function",
                clearly_type(self.config["client"]["use_offline_translate_function"]),
                str(self.config["client"]["use_offline_translate_function"]),
            )
            table.add_row(
                "offline_translate_shortcut",
                clearly_type(self.config["client"]["offline_translate_shortcut"]),
                str(self.config["client"]["offline_translate_shortcut"]),
            )
            table.add_row(
                "offline_translate_and_replace_the_selected_text_shortcut",
                clearly_type(
                    self.config["client"][
                        "offline_translate_and_replace_the_selected_text_shortcut"
                    ]
                ),
                str(
                    self.config["client"][
                        "offline_translate_and_replace_the_selected_text_shortcut"
                    ]
                ),
            )
            table.add_row(
                "use_online_translate_function",
                clearly_type(self.config["client"]["use_online_translate_function"]),
                str(self.config["client"]["use_online_translate_function"]),
            )
            table.add_row(
                "online_translate_shortcut",
                clearly_type(self.config["client"]["online_translate_shortcut"]),
                str(self.config["client"]["online_translate_shortcut"]),
            )
            table.add_row(
                "online_translate_target_languages",
                clearly_type(
                    self.config["client"]["online_translate_target_languages"]
                ),
                str(self.config["client"]["online_translate_target_languages"]),
            )
            table.add_row(
                "online_translate_and_replace_the_selected_text_shortcut",
                clearly_type(
                    self.config["client"][
                        "online_translate_and_replace_the_selected_text_shortcut"
                    ]
                ),
                str(
                    self.config["client"][
                        "online_translate_and_replace_the_selected_text_shortcut"
                    ]
                ),
            )
            table.add_row(
                "use_search_selected_text_with_everything_function",
                clearly_type(
                    self.config["client"][
                        "use_search_selected_text_with_everything_function"
                    ]
                ),
                str(
                    self.config["client"][
                        "use_search_selected_text_with_everything_function"
                    ]
                ),
            )
            table.add_row(
                "search_selected_text_with_everything_shortcut",
                clearly_type(
                    self.config["client"][
                        "search_selected_text_with_everything_shortcut"
                    ]
                ),
                str(
                    self.config["client"][
                        "search_selected_text_with_everything_shortcut"
                    ]
                ),
            )
            table.add_row(
                "hold_mode",
                clearly_type(self.config["client"]["hold_mode"]),
                str(self.config["client"]["hold_mode"]),
            )
            table.add_row(
                "suppress",
                clearly_type(self.config["client"]["suppress"]),
                str(self.config["client"]["suppress"]),
            )
            table.add_row(
                "restore_key",
                clearly_type(self.config["client"]["restore_key"]),
                str(self.config["client"]["restore_key"]),
            )
            table.add_row(
                "threshold",
                clearly_type(self.config["client"]["threshold"]),
                str(self.config["client"]["threshold"]),
            )
            table.add_row(
                "paste",
                clearly_type(self.config["client"]["paste"]),
                str(self.config["client"]["paste"]),
            )
            table.add_row(
                "restore_clipboard_after_paste",
                clearly_type(self.config["client"]["restore_clipboard_after_paste"]),
                str(self.config["client"]["restore_clipboard_after_paste"]),
            )
            table.add_row(
                "save_audio",
                clearly_type(self.config["client"]["save_audio"]),
                str(self.config["client"]["save_audio"]),
            )
            table.add_row(
                "save_markdown",
                clearly_type(self.config["client"]["save_markdown"]),
                str(self.config["client"]["save_markdown"]),
            )
            table.add_row(
                "audio_name_len",
                clearly_type(self.config["client"]["audio_name_len"]),
                str(self.config["client"]["audio_name_len"]),
            )
            table.add_row(
                "reduce_audio_files",
                clearly_type(self.config["client"]["reduce_audio_files"]),
                str(self.config["client"]["reduce_audio_files"]),
            )
            table.add_row(
                "trash_punc",
                clearly_type(self.config["client"]["trash_punc"]),
                str(self.config["client"]["trash_punc"]),
            )
            table.add_row(
                "hot_zh",
                clearly_type(self.config["client"]["hot_zh"]),
                str(self.config["client"]["hot_zh"]),
            )
            table.add_row(
                "Â§öÈü≥Â≠ó",
                clearly_type(self.config["client"]["Â§öÈü≥Â≠ó"]),
                str(self.config["client"]["Â§öÈü≥Â≠ó"]),
            )
            table.add_row(
                "Â£∞Ë∞É",
                clearly_type(self.config["client"]["Â£∞Ë∞É"]),
                str(self.config["client"]["Â£∞Ë∞É"]),
            )
            table.add_row(
                "hot_en",
                clearly_type(self.config["client"]["hot_en"]),
                str(self.config["client"]["hot_en"]),
            )
            table.add_row(
                "hot_rule",
                clearly_type(self.config["client"]["hot_rule"]),
                str(self.config["client"]["hot_rule"]),
            )
            table.add_row(
                "hot_kwd",
                clearly_type(self.config["client"]["hot_kwd"]),
                str(self.config["client"]["hot_kwd"]),
            )
            table.add_row(
                "mic_seg_duration",
                clearly_type(self.config["client"]["mic_seg_duration"]),
                str(self.config["client"]["mic_seg_duration"]),
            )
            table.add_row(
                "mic_seg_overlap",
                clearly_type(self.config["client"]["mic_seg_overlap"]),
                str(self.config["client"]["mic_seg_overlap"]),
            )
            table.add_row(
                "file_seg_duration",
                clearly_type(self.config["client"]["file_seg_duration"]),
                str(self.config["client"]["file_seg_duration"]),
            )
            table.add_row(
                "file_seg_overlap",
                clearly_type(self.config["client"]["file_seg_overlap"]),
                str(self.config["client"]["file_seg_overlap"]),
            )
            table.add_row(
                "mute_other_audio",
                clearly_type(self.config["client"]["mute_other_audio"]),
                str(self.config["client"]["mute_other_audio"]),
            )
            table.add_row(
                "pause_other_audio",
                clearly_type(self.config["client"]["pause_other_audio"]),
                str(self.config["client"]["pause_other_audio"]),
            )
            table.add_row(
                "arabic_year_number",
                clearly_type(self.config["client"]["arabic_year_number"]),
                str(self.config["client"]["arabic_year_number"]),
            )
            table.add_row(
                "shrink_automatically_to_tray",
                clearly_type(self.config["client"]["shrink_automatically_to_tray"]),
                str(self.config["client"]["shrink_automatically_to_tray"]),
            )
            table.add_row(
                "only_run_once",
                clearly_type(self.config["client"]["only_run_once"]),
                str(self.config["client"]["only_run_once"]),
            )
            table.add_row(
                "only_enable_microphones_when_pressed_record_shortcut",
                clearly_type(
                    self.config["client"][
                        "only_enable_microphones_when_pressed_record_shortcut"
                    ]
                ),
                str(
                    self.config["client"][
                        "only_enable_microphones_when_pressed_record_shortcut"
                    ]
                ),
            )
            table.add_row(
                "vscode_exe_path",
                clearly_type(self.config["client"]["vscode_exe_path"]),
                str(self.config["client"]["vscode_exe_path"]),
            )
            table.add_row(
                "play_start_music",
                clearly_type(self.config["client"]["play_start_music"]),
                str(self.config["client"]["play_start_music"]),
            )
            table.add_row(
                "start_music_path",
                clearly_type(self.config["client"]["start_music_path"]),
                str(self.config["client"]["start_music_path"]),
            )
            table.add_row(
                "start_music_volume",
                clearly_type(self.config["client"]["start_music_volume"]),
                str(self.config["client"]["start_music_volume"]),
            )
            table.add_row(
                "play_stop_music",
                clearly_type(self.config["client"]["play_stop_music"]),
                str(self.config["client"]["play_stop_music"]),
            )
            table.add_row(
                "stop_music_path",
                clearly_type(self.config["client"]["stop_music_path"]),
                str(self.config["client"]["stop_music_path"]),
            )
            table.add_row(
                "stop_music_volume",
                clearly_type(self.config["client"]["stop_music_volume"]),
                str(self.config["client"]["stop_music_volume"]),
            )
            table.add_row(
                "hint_while_recording_at_edit_position_powered_by_ahk",
                clearly_type(
                    self.config["client"][
                        "hint_while_recording_at_edit_position_powered_by_ahk"
                    ]
                ),
                str(
                    self.config["client"][
                        "hint_while_recording_at_edit_position_powered_by_ahk"
                    ]
                ),
            )
            table.add_row(
                "hint_while_recording_at_cursor_position",
                clearly_type(
                    self.config["client"]["hint_while_recording_at_cursor_position"]
                ),
                str(self.config["client"]["hint_while_recording_at_cursor_position"]),
            )
            table.add_row(
                "check_microphone_usage_by",
                clearly_type(self.config["client"]["check_microphone_usage_by"]),
                str(self.config["client"]["check_microphone_usage_by"]),
            )
            table.add_row(
                "enable_double_click_opposite_state",
                clearly_type(
                    self.config["client"]["enable_double_click_opposite_state"]
                ),
                str(self.config["client"]["enable_double_click_opposite_state"]),
            )
            table.add_row(
                "convert_to_traditional_chinese_main",
                clearly_type(
                    self.config["client"]["convert_to_traditional_chinese_main"]
                ),
                str(self.config["client"]["convert_to_traditional_chinese_main"]),
            )
            console.print(table)

        from siui.core import SiGlobal

        from util.edit_config_gui.write_toml import write_toml

        try:
            self.save.clicked.emit()
            get_value_from_gui()
            print_config()
            write_toml(self.config, self.config_path)
            SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                "‰øùÂ≠òÂÆ¢Êà∑Á´ØÈÖçÁΩÆÊàêÂäüÔºÅ\nÊâãÂä®ÈáçÂêØÂÆ¢Êà∑Á´Ø‰ª•Âä†ËΩΩÊñ∞ÈÖçÁΩÆ„ÄÇ",
                msg_type=1,
                fold_after=2000,
            )
        except Exception as e:
            SiGlobal.siui.windows["MAIN_WINDOW"].LayerRightMessageSidebar().send(
                f"‰øùÂ≠òÂÆ¢Êà∑Á´ØÈÖçÁΩÆÂ§±Ë¥•ÔºÅ\nÈîôËØØ‰ø°ÊÅØÔºö{e}",
                msg_type=4,
            )
